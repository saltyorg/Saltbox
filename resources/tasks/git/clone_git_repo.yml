#########################################################################
# Title:         Saltbox: Resources | Tasks | Git | Clone Git Repo      #
# Author(s):     desimaniac                                             #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Resources | Tasks | Git | Clone Git Repo | Set '_var_prefix' variable
  ansible.builtin.set_fact:
    _var_prefix: "{{ var_prefix
                  if (var_prefix is defined)
                  else role_name }}"

- name: Resources | Tasks | Git | Clone Git Repo | Set '_git_repo_*' variables
  ansible.builtin.set_fact:
    _git_repo_url: "{{ git_repo_url }}"
    _git_repo_dest: "{{ git_repo_dest }}"
    _git_repo_branch_primary: "{{ git_repo_branch_primary }}"
    _git_repo_branch_secondary: "{{ git_repo_branch_secondary | default('main') }}"

- name: Resources | Tasks | Git | Clone Git Repo | Check for existing git folder
  ansible.builtin.stat:
    path: "{{ _git_repo_dest }}"
  register: _git_repo_dest_stat

- name: Resources | Tasks | Git | Clone Git Repo | Existing repo block
  when: _git_repo_dest_stat.stat.exists
  block:
    - name: Resources | Tasks | Git | Clone Git Repo | Get current git branch
      ansible.builtin.shell: |
        cd {{ _git_repo_dest }}
        git rev-parse --abbrev-ref HEAD 2>/dev/null || echo ""
      register: _git_repo_dest_current_branch

    - name: Resources | Tasks | Git | Clone Git Repo | Update target branch
      ansible.builtin.set_fact:
        _git_repo_branch_primary: "{{ _git_repo_branch_secondary }}"
      when: _git_repo_branch_secondary == _git_repo_dest_current_branch | trim

- name: Resources | Tasks | Git | Clone Git Repo | git clone repo '{{ _git_repo_branch_primary }}'
  ansible.builtin.git:
    repo: "{{ _git_repo_url }}"
    dest: "{{ _git_repo_dest }}"
    clone: true
    version: "{{ _git_repo_branch_primary }}"
    force: true
  become: true
  become_user: "{{ user.name }}"
  ignore_errors: true
  register: _git_clone_status

- name: Resources | Tasks | Git | Clone Git Repo | Tasks when above fails
  when: _git_clone_status is failed
  block:
    - name: Resources | Tasks | Git | Clone Git Repo | git clone repo 'master' if above fails
      ansible.builtin.git:
        repo: "{{ _git_repo_url }}"
        dest: "{{ _git_repo_dest }}"
        clone: true
        version: master
        force: true
      become: true
      become_user: "{{ user.name }}"
      ignore_errors: true
      register: _git_clone_master_status

    - name: Resources | Tasks | Git | Clone Git Repo | Repair git folder if cloning '"{{ _git_repo_branch_primary }}"' fails
      ansible.builtin.shell: |
        cd "{{ _git_repo_dest }}"
        rm -fr .git
        git init
        git remote add origin {{ _git_repo_url }}
        git fetch origin
        git reset --hard origin/{{ _git_repo_branch_primary }}
      when: _git_clone_master_status is failed
