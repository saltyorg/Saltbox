##################################################################################
# Title:         Saltbox: Resources | Tasks | Docker | Create Docker Container   #
# Author(s):     desimaniac, salty                                               #
# URL:           https://github.com/saltyorg/Saltbox                             #
# --                                                                             #
##################################################################################
#                   GNU General Public License v3.0                              #
##################################################################################
---
- name: Resources | Tasks | Docker | Create Docker Container | Set '_var_prefix' variable
  ansible.builtin.set_fact:
    _var_prefix: "{{ var_prefix
                  if (var_prefix is defined)
                  else role_name }}"

- name: Resources | Tasks | Docker | Create Docker Container | Set instance name
  ansible.builtin.set_fact:
    _instance_name: "{{ lookup('vars', _var_prefix + '_name', default=_var_prefix) }}"

- name: Resources | Tasks | Docker | Create Docker Container | Network Container Health Status
  ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/network_container_health_status.yml"
  when: ('container:' in lookup('docker_var', '_docker_network_mode', default=docker_networks_name_common))

- name: Resources | Tasks | Docker | Create Docker Container | Create Docker Container # noqa args[module]
  community.docker.docker_container:
    auto_remove: "{{ lookup('docker_var', '_docker_auto_remove', default=omit) }}"
    blkio_weight: "{{ lookup('docker_var', '_docker_blkio_weight', default=omit) }}"
    cap_drop: "{{ lookup('docker_var', '_docker_cap_drop', default=omit) }}"
    capabilities: "{{ lookup('docker_var', '_docker_capabilities', default=omit) }}"
    cgroup_parent: "{{ lookup('docker_var', '_docker_cgroup_parent', default=omit) }}"
    cgroupns_mode: "{{ lookup('docker_var', '_docker_cgroupns_mode', default=omit) }}"
    cleanup: "{{ lookup('docker_var', '_docker_cleanup', default=omit) }}"
    command: "{{ (lookup('docker_var', '_docker_commands', default=[]) | reject('equalto', omit) | list)
              if (lookup('docker_var', '_docker_commands', default=[]) | length > 0)
              else omit }}"
    command_handling: compatibility
    container_default_behavior: compatibility
    cpu_period: "{{ lookup('docker_var', '_docker_cpu_period', default=omit) }}"
    cpu_quota: "{{ lookup('docker_var', '_docker_cpu_quota', default=omit) }}"
    cpu_shares: "{{ lookup('docker_var', '_docker_cpu_shares', default=omit) }}"
    cpus: "{{ (docker_cpus_default is defined) | ternary(docker_cpus_default, lookup('docker_var', '_docker_cpus', default=omit)) }}"
    cpuset_cpus: "{{ lookup('docker_var', '_docker_cpuset_cpus', default=omit) }}"
    cpuset_mems: "{{ lookup('docker_var', '_docker_cpuset_mems', default=omit) }}"
    default_host_ip: ""
    detach: true
    device_cgroup_rules: "{{ lookup('docker_var', '_docker_device_cgroup_rules', default=omit) }}"
    device_read_bps: "{{ lookup('docker_var', '_docker_device_read_bps', default=omit) }}"
    device_read_iops: "{{ lookup('docker_var', '_docker_device_read_iops', default=omit) }}"
    device_requests: "{{ lookup('docker_var', '_docker_device_requests', default=omit) }}"
    device_write_bps: "{{ lookup('docker_var', '_docker_device_write_bps', default=omit) }}"
    device_write_iops: "{{ lookup('docker_var', '_docker_device_write_iops', default=omit) }}"
    devices: "{{ lookup('docker_var', '_docker_devices', default=omit) }}"
    dns_opts: "{{ lookup('docker_var', '_docker_dns_opts', default=omit) }}"
    dns_search_domains: "{{ lookup('docker_var', '_docker_dns_search_domains', default=omit) }}"
    dns_servers: "{{ lookup('docker_var', '_docker_dns_servers', default=omit) }}"
    domainname: "{{ lookup('docker_var', '_docker_domainname', default=omit) }}"
    entrypoint: "{{ lookup('docker_var', '_docker_entrypoint', default=omit) }}"
    env: "{{ ((nvidia_docker_env if use_nvidia else {})
             | combine(lookup('docker_var', '_docker_envs', default={})))
          if (((nvidia_docker_env if use_nvidia else {}) | combine(lookup('docker_var', '_docker_envs', default={}))) | length > 0)
          else omit }}"
    env_file: "{{ lookup('docker_var', '_docker_env_file', default=omit) }}"
    etc_hosts: "{{ (((docker_hosts_common if lookup('docker_var', '_docker_hosts_use_common', default=true) else {}) | combine(lookup('docker_var', '_docker_hosts', default={})))
                   if (((docker_hosts_common if lookup('docker_var', '_docker_hosts_use_common', default=true) else {}) | combine(lookup('docker_var', '_docker_hosts', default={}))) | length > 0)
                   else omit)
                if not ('container:' in lookup('docker_var', '_docker_network_mode', default=docker_networks_name_common))
                else omit }}"
    exposed_ports: "{{ (lookup('docker_var', '_docker_exposed_ports', default=[]) | unique | reject('equalto', omit) | list)
                    if not ('container:' in lookup('docker_var', '_docker_network_mode', default=docker_networks_name_common))
                    else omit }}"
    groups: "{{ lookup('docker_var', '_docker_groups', default=omit) }}"
    healthcheck: "{{ lookup('docker_var', '_docker_healthcheck', default=omit) }}"
    healthy_wait_timeout: "{{ lookup('docker_var', '_docker_healthy_wait_timeout', default=300) }}"
    hostname: "{{ lookup('docker_var', '_docker_hostname', default=omit)
               if (lookup('docker_var', '_docker_network_mode', default=docker_networks_name_common) == docker_networks_name_common)
               else omit }}"
    image: "{{ lookup('docker_var', '_docker_image') }}"
    image_comparison: "desired-image"
    image_label_mismatch: "ignore"
    image_name_mismatch: "recreate"
    init: "{{ lookup('docker_var', '_docker_init', default=omit) }}"
    ipc_mode: "{{ lookup('docker_var', '_docker_ipc_mode', default=omit) }}"
    keep_volumes: "{{ lookup('docker_var', '_docker_keep_volumes', default=omit) }}"
    kernel_memory: "{{ lookup('docker_var', '_docker_kernel_memory', default=omit) }}"
    kill_signal: "{{ lookup('docker_var', '_docker_kill_signal', default=omit) }}"
    labels: "{{ ((docker_labels_common if lookup('docker_var', '_docker_labels_use_common', default=true) else {}) | combine(lookup('docker_var', '_docker_labels', default={})))
             if (((docker_labels_common if lookup('docker_var', '_docker_labels_use_common', default=true) else {}) | combine(lookup('docker_var', '_docker_labels', default={}))) | length > 0)
             else omit }}"
    links: "{{ lookup('docker_var', '_docker_links', default=omit) }}"
    log_driver: "{{ (docker_log_driver != 'default') | ternary(docker_log_driver, lookup('docker_var', '_docker_log_driver', default=omit)) }}"
    log_options: "{{ (docker_log_options != 'default') | ternary(docker_log_options, lookup('docker_var', '_docker_log_options', default=omit)) }}"
    memory: "{{ (docker_memory_default is defined) | ternary(docker_memory_default, lookup('docker_var', '_docker_memory', default=omit)) }}"
    memory_reservation: "{{ lookup('docker_var', '_docker_memory_reservation', default=omit) }}"
    memory_swap: "{{ lookup('docker_var', '_docker_memory_swap', default=omit) }}"
    memory_swappiness: "{{ lookup('docker_var', '_docker_memory_swappiness', default=omit) }}"
    mounts: "{{ lookup('docker_var', '_docker_mounts', default=omit) }}"
    name: "{{ lookup('docker_var', '_docker_container', default=_instance_name) }}"
    network_mode: "{{ lookup('docker_var', '_docker_network_mode', default=docker_networks_name_common) }}"
    networks: "{{ omit
               if (lookup('docker_var', '_docker_network_mode', default=docker_networks_name_common) == 'host') or ('container' in lookup('docker_var', '_docker_network_mode', default=docker_networks_name_common))
               else lookup('docker_var', '_docker_networks') }}"
    networks_cli_compatible: true
    oom_killer: "{{ lookup('docker_var', '_docker_oom_killer', default=omit) }}"
    oom_score_adj: "{{ lookup('docker_var', '_docker_oom_score_adj', default=omit) }}"
    output_logs: "{{ lookup('docker_var', '_docker_output_logs', default=omit) }}"
    paused: "{{ lookup('docker_var', '_docker_paused', default=omit) }}"
    pid_mode: "{{ lookup('docker_var', '_docker_pid_mode', default=omit) }}"
    privileged: "{{ lookup('docker_var', '_docker_privileged', default=omit) }}"
    published_ports: "{{ (lookup('docker_var', '_docker_ports', default=[]) | unique | reject('equalto', omit) | list)
                      if not ('container:' in lookup('docker_var', '_docker_network_mode', default=docker_networks_name_common))
                      else omit }}"
    pull: "{{ lookup('docker_var', '_docker_image_pull', default=true) | bool }}"
    pull_check_mode_behavior: "image_not_present"
    read_only: "{{ lookup('docker_var', '_docker_read_only', default=omit) }}"
    recreate: "{{ lookup('docker_var', '_docker_recreate', default=omit) }}"
    restart_policy: "{{ lookup('docker_var', '_docker_restart_policy', default='unless-stopped') }}"
    restart_retries: "{{ lookup('docker_var', '_docker_restart_retries', default=omit) }}"
    runtime: "{{ lookup('docker_var', '_docker_runtime', default=omit) }}"
    security_opts: "{{ lookup('docker_var', '_docker_security_opts', default=omit) }}"
    shm_size: "{{ lookup('docker_var', '_docker_shm_size', default=omit) }}"
    state: started
    stop_timeout: "{{ lookup('docker_var', '_docker_stop_timeout', default='10') }}"
    storage_opts: "{{ lookup('docker_var', '_docker_storage_opts', default=omit) }}"
    sysctls: "{{ lookup('docker_var', '_docker_sysctls', default=omit) }}"
    tls_hostname: localhost
    tmpfs: "{{ lookup('docker_var', '_docker_tmpfs', default=omit) }}"
    ulimits: "{{ lookup('docker_var', '_docker_ulimits', default=omit) }}"
    user: "{{ lookup('docker_var', '_docker_user', default=omit) }}"
    userns_mode: "{{ lookup('docker_var', '_docker_userns_mode', default=omit) }}"
    uts: "{{ lookup('docker_var', '_docker_uts', default=omit) }}"
    volume_driver: "{{ lookup('docker_var', '_docker_volume_driver', default=omit) }}"
    volumes: "{{ ((docker_volumes_common + lookup('docker_var', '_docker_volumes', default=[]))
              if (lookup('docker_var', '_docker_volumes_global', default=true) | bool)
              else lookup('docker_var', '_docker_volumes', default=[])) | unique | reject('equalto', omit) | list }}"
    volumes_from: "{{ lookup('docker_var', '_docker_volumes_from', default=omit) }}"
    working_dir: "{{ lookup('docker_var', '_docker_working_dir', default=omit) }}"
  register: create_docker_result
  retries: "{{ ansible_retry_count
            if (not continuous_integration)
            else ansible_retry_count_ci }}"
  timeout: "{{ lookup('docker_var', '_docker_create_timeout', default=120)
            if continuous_integration
            else omit }}"
  delay: 10
  until: create_docker_result is succeeded

- name: "Resources | Tasks | Docker | Create Docker Container | Wait for {{ docker_create_image_prune_delay_timeout }} seconds"
  ansible.builtin.wait_for:
    timeout: "{{ docker_create_image_prune_delay_timeout }}"
  when: docker_create_image_prune and docker_create_image_prune_delay

- name: Resources | Tasks | Docker | Create Docker Container | Prune dangling images
  community.docker.docker_prune:
    images: true
    images_filters:
      until: 24h
    timeout: 120
  when: docker_create_image_prune
  register: prune_images_result
  retries: "{{ ansible_retry_count
            if (not continuous_integration)
            else ansible_retry_count_ci }}"
  delay: 10
  until: prune_images_result is succeeded
