##########################################################################
# Title:         Saltbox: Plex DB Role                                   #
# Author(s):     salty                                                   #
# URL:           https://github.com/saltyorg/Saltbox                     #
# --                                                                     #
##########################################################################
#                   GNU General Public License v3.0                      #
##########################################################################
---
- name: "Check if '{{ plex_role_paths_db_location | basename }}' exists"
  ansible.builtin.stat:
    path: "{{ plex_role_paths_db_location }}"
  register: plex_db

- name: "Check if '{{ plex_role_paths_db_blobs_location | basename }}' exists"
  ansible.builtin.stat:
    path: "{{ plex_role_paths_db_blobs_location }}"
  register: plex_db_blobs

- name: Fail if database does not exist
  ansible.builtin.fail:
    msg: "Plex databases are not present for {{ plex_name }} instance"
  when: (not (plex_db.stat.exists and plex_db_blobs.stat.exists))

- name: Stop Docker container
  ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/stop_docker_container.yml"
  vars:
    var_prefix: "plex"

- name: Integrity check
  block:
    - name: Check if main database passes integrity_check
      ansible.builtin.shell: "'/opt/plexsql/Plex SQLite' '{{ plex_role_paths_db_location }}' 'PRAGMA integrity_check(1)'"
      register: plex_db_integrity_check
      failed_when: (plex_db_integrity_check.stdout != 'ok')

    - name: Check if blobs database passes integrity_check
      ansible.builtin.shell: "'/opt/plexsql/Plex SQLite' '{{ plex_role_paths_db_blobs_location }}' 'PRAGMA integrity_check(1)'"
      register: plex_db_blobs_integrity_check
      failed_when: (plex_db_blobs_integrity_check.stdout != 'ok')

  rescue:
    - name: Set Fact
      ansible.builtin.set_fact:
        plex_db_failed_integrity: true

    - name: "Plex instance '{{ plex_name }}' failed the integrity check."
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Plex instance '{{ plex_name }}' failed the integrity check."

- name: Database tasks
  when: not plex_db_integrity_check_only
  block:
    - name: Create backup directory
      ansible.builtin.file:
        path: "/tmp/{{ plex_name }}_backup"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"

    - name: Backup databases
      ansible.builtin.shell: "cp '{{ plex_role_paths_plugin_support_location }}/Databases/{{ item }}' /tmp/{{ plex_name }}_backup/"
      loop: "{{ plex_db_files }}"

    - name: "Vacuum '{{ plex_role_paths_db_location | basename }}' database"
      ansible.builtin.shell: "'/opt/plexsql/Plex SQLite' '{{ plex_role_paths_db_location }}' 'VACUUM;'"
      register: plex_db_vacuum
      failed_when: (plex_db_vacuum.rc != 0)

    - name: "Vacuum '{{ plex_role_paths_db_blobs_location | basename }}' database"
      ansible.builtin.shell: "'/opt/plexsql/Plex SQLite' '{{ plex_role_paths_db_blobs_location }}' 'VACUUM;'"
      register: plex_db_blobs_vacuum
      failed_when: (plex_db_blobs_vacuum.rc != 0)

    - name: "Reindex '{{ plex_role_paths_db_location | basename }}' database"
      ansible.builtin.shell: "'/opt/plexsql/Plex SQLite' '{{ plex_role_paths_db_location }}' 'REINDEX;'"
      register: plex_db_reindex
      failed_when: (plex_db_reindex.rc != 0)

    - name: "Reindex '{{ plex_role_paths_db_blobs_location | basename }}' database"
      ansible.builtin.shell: "'/opt/plexsql/Plex SQLite' '{{ plex_role_paths_db_blobs_location }}' 'REINDEX;'"
      register: plex_db_blobs_reindex
      failed_when: (plex_db_blobs_reindex.rc != 0)

  rescue:
    - name: Set Fact
      ansible.builtin.set_fact:
        plex_db_failed_optimization: true

    - name: "Plex instance '{{ plex_name }}' failed the optimization tasks."
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "Plex instance '{{ plex_name }}' failed the optimization tasks."

    - name: Delete wal and shm files
      ansible.builtin.file:
        path: "{{ plex_role_paths_plugin_support_location }}/Databases/{{ item }}"
        state: absent
      loop:
        - "com.plexapp.plugins.library.db-wal"
        - "com.plexapp.plugins.library.db-shm"
        - "com.plexapp.plugins.library.blobs.db-wal"
        - "com.plexapp.plugins.library.blobs.db-shm"

    - name: Restore database backup
      ansible.builtin.shell: "cp -f '/tmp/{{ plex_name }}_backup/{{ item }}' '{{ plex_role_paths_plugin_support_location }}/Databases/{{ item }}'"
      loop: "{{ plex_db_files }}"

- name: Start Docker container
  ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/start_docker_container.yml"
  vars:
    var_prefix: "plex"

- name: Delete backup directory
  ansible.builtin.file:
    path: "/tmp/{{ plex_name }}_backup"
    state: absent
