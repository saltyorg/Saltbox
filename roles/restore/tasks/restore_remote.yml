#########################################################################
# Title:         Restore: Remote Restore Task                           #
# Author(s):     desimaniac                                             #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Fail when no backup method is enabled or when no local backup exists
  ansible.builtin.fail:
    msg:
      - "Rclone is not enabled and no local backup exists."
      - "You must either enable rclone, in the backup settings, or provide backup tarball files locally, to perform a restore."
  when: (not backup.rclone.enable)

- name: Cleanup backup location
  ansible.builtin.file:
    path: "{{ backup.local.destination }}"
    state: absent
  become: true
  become_user: "{{ user.name }}"

- name: "Check if 'rclone.conf' exists in '{{ playbook_dir }}' folder"
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/rclone.conf"
  register: rclone_conf_playbook_dir

- name: Check if rclone is installed
  ansible.builtin.stat:
    path: "/usr/bin/rclone"
  register: rclone_binary

- name: Run rclone role
  ansible.builtin.include_role:
    name: rclone
  when: rclone_conf_playbook_dir.stat.exists or (not rclone_binary.stat.exists)

- name: Test rclone remote destination
  ansible.builtin.shell: |
    /usr/bin/rclone lsd {{ backup.rclone.destination }} \
      {{ "--user-agent='" + restore_user_agent + "'" if (restore_user_agent | length > 0) else "" }}
  become: true
  become_user: "{{ user.name }}"
  register: rclone_test
  failed_when: (rclone_test.rc > 5)

- name: "Fail when rclone is misconfigured."
  ansible.builtin.fail:
    msg: >
      The rclone remote is misconfigured - You must place a valid 'rclone.conf' file in '{{ playbook_dir }}'
      (or setup Rclone via 'rclone config') and verify that the 'backup.rclone.destination' in settings is valid.
      One way to validate is to run 'rclone lsd {{ backup.rclone.destination }}'.
      If you are using a service account to authenticate the '{{ backup.rclone.destination }}' rclone remote, you will need to put that file in place manually.
  when: (rclone_test.rc > 0)

- name: Check if restore_rclone.log exists
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/restore_rclone.log"
  register: restore_rclone

- name: Set restore_rclone.log permissions
  ansible.builtin.file:
    path: "{{ playbook_dir }}/restore_rclone.log"
    state: file
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0660"
  when: restore_rclone.stat.exists

- name: "Fetch backup from '{{ backup.rclone.destination }}'"
  ansible.builtin.shell: |
    /usr/bin/rclone copy \
      {{ "--user-agent='" + restore_user_agent + "'" if (restore_user_agent | length > 0) else "" }} \
      --transfers=8 \
      {{ lookup('vars', 'restore_' + backup.rclone.template + '_template', default='') }} \
      --exclude 'archived/**' \
      --stats=30s \
      -vv \
      --log-file='{{ playbook_dir }}/restore_rclone.log' \
      '{{ backup.rclone.destination }}/' '{{ backup.local.destination }}'
  become: true
  become_user: "{{ user.name }}"

- name: "Check if tar files were retrieved"
  ansible.builtin.find:
    paths: "{{ backup.local.destination }}/opt"
    file_type: file
    patterns: '*.tar'
  register: dir_files2

- name: "Fail if tar files are missing"
  ansible.builtin.fail:
    msg: "There must have been an issue retrieving the tar files as they are missing in '{{ backup.local.destination }}/opt/'"
  when: (dir_files2.matched | int == 0)
