#########################################################################
# Title:         Saltbox: Remote Role | Cleanup Tasks                   #
# Author(s):     salty                                                  #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Cleanup | Set 'rclone_service_name'"
  ansible.builtin.set_fact:
    rclone_service_name: "{{ item.key | regex_replace('\\.service$', '') }}"
    rclone_service_name_full: "{{ item.key }}"
    rclone_refresh_service_name: "{{ (item.key | regex_replace('\\.service$', '')) + '_refresh.service' }}"
    rclone_service_status: "{{ item.value }}"

- name: "Cleanup | Fail if 'rclone_service_name' is empty"
  ansible.builtin.fail:
    msg: "rclone_service_name is empty"
  when: (rclone_service_name | length == 0)

- name: "Cleanup | Stop and disable existing '{{ rclone_service_name }}.service'"
  ansible.builtin.systemd_service:
    name: "{{ rclone_service_name }}.service"
    state: stopped
    enabled: false
  when: (rclone_service_name_full in saltbox_managed_rclone_services) and (rclone_service_status != 'not-found') and (rclone_service_status != 'failed')

- name: "Cleanup | Delete '{{ rclone_service_name }}.service'"
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ rclone_service_name }}.service"
    state: absent
  when: (rclone_service_name_full in saltbox_managed_rclone_services)

- name: "Cleanup | Stop and disable existing '{{ rclone_refresh_service_name }}'"
  ansible.builtin.systemd_service:
    name: "{{ rclone_refresh_service_name }}"
    state: stopped
    enabled: false
  when: (rclone_refresh_service_name in saltbox_managed_rclone_services) and (rclone_service_status != 'not-found') and (rclone_service_status != 'failed')

- name: "Cleanup | Stop and disable existing '{{ rclone_service_name }}_refresh.timer'"
  ansible.builtin.systemd_service:
    name: "{{ rclone_service_name }}_refresh.timer"
    state: stopped
    enabled: false
  when: (rclone_refresh_service_name in saltbox_managed_rclone_services) and (rclone_service_status != 'not-found') and (rclone_service_status != 'failed')

- name: "Cleanup | Delete '{{ rclone_refresh_service }}_refresh' services"
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ rclone_refresh_service }}"
    state: absent
  loop_control:
    loop_var: rclone_refresh_service
  loop:
    - "{{ rclone_service_name }}_refresh.service"
    - "{{ rclone_service_name }}_refresh.timer"
  when: (rclone_refresh_service_name in saltbox_managed_rclone_services)

- name: "Cleanup | Set 'cleanup_mount_path'"
  ansible.builtin.set_fact:
    cleanup_mount_path: "/mnt/remote/{{ rclone_service_name | regex_replace('^' + rclone_service_template, '') }}"

- name: "Cleanup | Fail if 'cleanup_mount_path' is empty"
  ansible.builtin.fail:
    msg: "rclone_service_name is empty"
  when: (cleanup_mount_path | length == 0)

- name: "Cleanup | Check if '{{ cleanup_mount_path }}' exists"
  ansible.builtin.stat:
    path: "{{ cleanup_mount_path }}"
  register: cleanup_mount_path_stat

- name: "Cleanup | Tasks for '{{ cleanup_mount_path }}' path"
  when: (cleanup_mount_path_stat is failed) or (cleanup_mount_path_stat.stat.exists)
  block:
    - name: "Cleanup | Remove empty directories in '{{ cleanup_mount_path }}'"
      ansible.builtin.shell: "find '{{ cleanup_mount_path }}' -type d -empty -delete"
      ignore_errors: true

    - name: "Cleanup | Check if '{{ cleanup_mount_path }}' still exists"
      ansible.builtin.stat:
        path: "{{ cleanup_mount_path }}"
      register: cleanup_mount_path_stat2

    - name: "Cleanup | Recursively find '{{ cleanup_mount_path }}' files"
      ansible.builtin.find:
        paths: '{{ cleanup_mount_path }}'
        hidden: true
        recurse: true
      register: cleanup_mount_path_stat_files
      when: cleanup_mount_path_stat2.stat.exists

    - name: "Cleanup | Backup non-empty '{{ cleanup_mount_path }}' path"
      ansible.builtin.shell: "mv {{ cleanup_mount_path }} {{ cleanup_mount_path }}_{{ '%Y-%m-%d_%H.%M.%S' | strftime(ansible_date_time['epoch'] | int) }}"
      ignore_errors: true
      when: cleanup_mount_path_stat2.stat.exists and (cleanup_mount_path_stat_files.matched | int > 0)

    - name: "Cleanup | Remove '{{ cleanup_mount_path }}'"
      ansible.builtin.file:
        path: "{{ cleanup_mount_path }}"
        state: absent
