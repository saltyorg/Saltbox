#########################################################################
# Title:         Saltbox: User | User Account Tas                       #
# Author(s):     desimaniac                                             #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: User Account | Set 'user_group_dict'
  ansible.builtin.set_fact:
    user_group_dict: "{{ {user.name: user_group_id | default(false), 'docker': user_docker_group_id | default(false)} }}"

- name: User Account | Create common groups
  ansible.builtin.group:
    name: "{{ item.key }}"
    gid: "{{ item.value if item.value else omit }}"
    state: present
  with_dict: "{{ user_group_dict }}"

- name: User Account | Copy skeleton files to '/etc/skel'
  ansible.builtin.copy:
    src: "etc/skel/{{ item }}"
    dest: "/etc/skel/"
    mode: "0664"
    force: false
  loop:
    - ".bash_logout"
    - ".bashrc"
    - ".profile"

- name: User Account | Create user '{{ user.name }}'
  ansible.builtin.user:
    name: "{{ user.name }}"
    group: "{{ user.name }}"
    groups: "{{ user.name }},sudo,video,render,docker"
    password: "{{ user.pass | string | password_hash('sha512') }}"
    update_password: on_create
    append: true
    create_home: true
    skeleton: /etc/skel
    uid: "{{ user_id | default(omit) }}"
  register: user_info

- name: Check for skeleton files in user home directory
  ansible.builtin.stat:
    path: "/home/{{ user.name }}/{{ item }}"
  loop:
    - ".bash_logout"
    - ".bashrc"
    - ".profile"
  register: skel_files_check

- name: Copy missing skeleton files to user home directory
  ansible.builtin.copy:
    src: "/etc/skel/{{ item.item }}"
    dest: "/home/{{ user.name }}/{{ item.item }}"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0664"
    force: false
  loop: "{{ skel_files_check.results }}"
  when: not item.stat.exists

- name: User Account | Get video group info
  ansible.builtin.shell: "getent group video | cut -d: -f3"
  register: vgid_lookup

- name: User Account | Get render group info
  ansible.builtin.shell: "getent group render | cut -d: -f3"
  register: rgid_lookup

- name: User Account | Set 'uid', 'gid', 'vgid' and 'rgid'
  ansible.builtin.set_fact:
    uid: "{{ user_info.uid | string }}"
    gid: "{{ user_info.group | string }}"
    vgid: "{{ vgid_lookup.stdout }}"
    rgid: "{{ rgid_lookup.stdout }}"

- name: User Account | Check if '/etc/sudoers' exists
  ansible.builtin.stat:
    path: "/etc/sudoers"
  register: etc_sudoers

- name: User Account | Set sudo group to 'NOPASSWD'
  ansible.builtin.lineinfile:
    path: "/etc/sudoers"
    regexp: '^%sudo\s'
    line: '%sudo   ALL=(ALL) NOPASSWD:ALL'
    state: present
  when: etc_sudoers.stat.exists

- name: User Account | Reset ownership of '{{ user_paths_home_location }}/' path
  ansible.builtin.file:  # noqa risky-file-permissions
    path: "{{ user_paths_home_location }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    recurse: true
    follow: false
  when: (not continuous_integration)

- name: User Account | Reset ownership of '{{ srv_folder }}/' path
  ansible.builtin.file:  # noqa risky-file-permissions
    path: "{{ srv_folder }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    recurse: true
    follow: false

- name: User Account | Reset ownership of '{{ server_appdata_path }}/' path
  ansible.builtin.file:  # noqa risky-file-permissions
    path: "{{ server_appdata_path }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    recurse: true
    follow: false

- name: User Account | Set authorized keys
  ansible.posix.authorized_key:
    user: "{{ user.name }}"
    state: present
    key: "{{ user.ssh_key }}"
  when: (user.ssh_key is defined) and (user.ssh_key is not none) and (user.ssh_key | length > 0)
