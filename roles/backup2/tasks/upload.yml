- name: Async tar and upload
  ansible.builtin.shell: |
    tar \
      --ignore-failed-read \
      --warning=no-file-changed \
      --warning=no-file-removed \
      --exclude='./snapshots' \
      --exclude-from '{{ backup_excludes_list_path }}' \
      -cf - -C '{{ async_item | dirname }}' './{{ async_item | basename }}' \
      | /usr/bin/rclone rcat \
      {{ "--user-agent='" + backup2_user_agent + "'" if (backup2_user_agent | length > 0) else "" }} \
      {{ lookup('vars', 'backup2_' + backup.rclone.template + '_template', default='') }} \
      --stats=30s \
      {{ '--bind=' + ansible_facts['default_ipv4']['address'] if rclone_mounts_ipv4_only else '' }} \
      --bwlimit={{ backup2_rclone_upload_speed_limit }} \
      -vv \
      --log-file='{{ playbook_dir }}/backup_rclone.log' \
      '{{ backup.rclone.destination }}/opt/{{ async_item | basename }}.tar'
  args:
    executable: /bin/bash
  environment: "{{ backup2_rclone_env }}"
  become: true
  become_user: "{{ user.name }}"
  async: 43200
  poll: 0
  loop: "{{ folders }}"
  loop_control:
    loop_var: "async_item"
  register: async_results

- name: Check sync status # noqa args[module]
  ansible.builtin.async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: "async_result_item"
  register: async_poll_results
  become: true
  become_user: "{{ user.name }}"
  until: async_poll_results.finished
  retries: 9999
  delay: 5
