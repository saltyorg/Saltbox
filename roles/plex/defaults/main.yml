##########################################################################
# Title:         Saltbox: Plex | Default Variables                       #
# Author(s):     desimaniac, salty                                       #
# URL:           https://github.com/saltyorg/Saltbox                     #
# --                                                                     #
##########################################################################
#                   GNU General Public License v3.0                      #
##########################################################################
---
################################
# Basics
################################

plex_instances: ["plex"]

################################
# Settings
################################

plex_open_main_ports: false
plex_open_local_ports: false
plex_plugin_webtools: false
plex_plugin_sub_zero: false
plex_insecure: false
plex_lan_ip: ""

################################
# Proxy
################################

# For instances this works the same as usual plex2_auth_token_proxy for an instance named plex2.
plex_auth_token_proxy: ""

plex_proxy_dict:
  http_proxy: "{{ plex_proxy_lookup if (plex_proxy_lookup | length > 0) else '' }}"
  https_proxy: "{{ plex_proxy_lookup if (plex_proxy_lookup | length > 0) else '' }}"

# Do not edit or override using the inventory
plex_proxy_lookup: "{{ lookup('vars', plex_name + '_auth_token_proxy', default=plex_auth_token_proxy) }}"
plex_network_modes: []

################################
# Paths
################################

plex_paths_folder: "{{ plex_name }}"
plex_paths_location: "{{ server_appdata_path }}/{{ plex_paths_folder }}"
plex_paths_transcodes_location: "{{ transcodes_path }}/{{ plex_paths_folder }}"
plex_paths_folders_list:
  - "{{ plex_paths_location }}"
  - "{{ plex_paths_location }}/Library"
  - "{{ plex_paths_location }}/Library/Application Support"
  - "{{ plex_paths_location }}/Library/Application Support/Plex Media Server"
  - "{{ plex_paths_location }}/Library/Application Support/Plex Media Server/Plug-ins"
  - "{{ plex_paths_location }}/Library/Logs"
  - "{{ plex_paths_location }}/Library/Logs/Plex Media Server"
  - "{{ plex_paths_transcodes_location }}"
plex_paths_application_support_location: "{{ plex_paths_location }}/Library/Application Support/Plex Media Server"
plex_paths_config_location: "{{ plex_paths_application_support_location }}/Preferences.xml"
plex_paths_log_location: "{{ plex_paths_application_support_location }}/Logs"
plex_paths_plugins_location: "{{ plex_paths_application_support_location }}/Plug-ins"
plex_paths_plugin_support_location: "{{ plex_paths_application_support_location }}/Plug-in Support"
plex_paths_db_location: "{{ plex_paths_plugin_support_location }}/Databases/com.plexapp.plugins.library.db"
plex_paths_db_blobs_location: "{{ plex_paths_plugin_support_location }}/Databases/com.plexapp.plugins.library.blobs.db"

################################
# Web
################################

plex_web_subdomain: "{{ plex_name }}"
plex_web_domain: "{{ user.domain }}"
plex_web_port: "32400"
plex_web_scheme: "https"
plex_web_http_port: "32400"
plex_web_http_scheme: "http"
plex_web_url: "{{ 'https://' + (lookup('vars', plex_name + '_web_subdomain', default=plex_web_subdomain) + '.' + lookup('vars', plex_name + '_web_domain', default=plex_web_domain)
               if (lookup('vars', plex_name + '_web_subdomain', default=plex_web_subdomain) | length > 0)
               else lookup('vars', plex_name + '_web_domain', default=plex_web_domain)) }}"
plex_webtools_web_subdomain: "{{ plex_name }}-webtools"
plex_webtools_web_domain: "{{ plex_web_domain }}"
plex_webtools_web_port: "33400"
plex_webtools_host: "{{ lookup('vars', plex_name + '_webtools_web_subdomain', default=plex_webtools_web_subdomain)
                        + '.' + lookup('vars', plex_name + '_webtools_web_domain', default=plex_webtools_web_domain) }}"
plex_web_insecure_url: "{{ 'http://' + (lookup('vars', plex_name + '_web_subdomain', default=plex_web_subdomain) + '.' + lookup('vars', plex_name + '_web_domain', default=plex_web_domain)
                        if (lookup('vars', plex_name + '_web_subdomain', default=plex_web_subdomain) | length > 0)
                        else lookup('vars', plex_name + '_web_domain', default=plex_web_domain)) }}"

################################
# DNS
################################

plex_dns_record: "{{ lookup('vars', plex_name + '_web_subdomain', default=plex_web_subdomain) }}"
plex_dns_zone: "{{ lookup('vars', plex_name + '_web_domain', default=plex_web_domain) }}"
plex_dns_proxy: "{{ dns.proxied }}"
plex_webtools_dns_record: "{{ lookup('vars', plex_name + '_webtools_web_subdomain', default=plex_webtools_web_subdomain) }}"
plex_webtools_dns_zone: "{{ lookup('vars', plex_name + '_webtools_web_domain', default=plex_webtools_web_domain) }}"
plex_webtools_dns_proxy: "{{ dns.proxied }}"

################################
# Traefik
################################

plex_traefik_sso_middleware: ""
plex_traefik_middleware_default: "{{ traefik_default_middleware
                                     + (',themepark-' + lookup('vars', plex_name + '_name', default=plex_name)
                                       if (plex_themepark_enabled and global_themepark_plugin_enabled)
                                       else '') }}"
plex_traefik_middleware_custom: ""
plex_traefik_certresolver: "{{ traefik_default_certresolver }}"
plex_traefik_enabled: true
plex_traefik_api_enabled: false
plex_traefik_api_endpoint: ""
plex_traefik_error_pages_enabled: false
plex_traefik_gzip_enabled: false

plex_traefik_middleware_http: "{{ 'globalHeaders@file'
                               if plex_insecure
                               else traefik_default_middleware_default_http }}"
plex_web_serverstransport: "skipverify@file"

plex_webtools_traefik_sso_middleware: ""
plex_webtools_traefik_middleware_default: "{{ traefik_default_middleware
                                              + (',' + lookup('vars', plex_name + '_webtools_traefik_sso_middleware', default=plex_webtools_traefik_sso_middleware)
                                                if (lookup('vars', plex_name + '_webtools_traefik_sso_middleware', default=plex_webtools_traefik_sso_middleware) | length > 0)
                                                else '') }}"
plex_webtools_traefik_middleware_custom: ""
plex_webtools_traefik_middleware: "{{ plex_webtools_traefik_middleware_default
                                      + (',' + plex_webtools_traefik_middleware_custom
                                        if (not plex_webtools_traefik_middleware_custom.startswith(',') and plex_webtools_traefik_middleware_custom | length > 0)
                                        else plex_webtools_traefik_middleware_custom) }}"
plex_webtools_traefik_certresolver: "{{ traefik_default_certresolver }}"
plex_webtools_traefik_router: "{{ lookup('vars', plex_name + '_webtools_web_subdomain', default=plex_webtools_web_subdomain) }}"

################################
# THEME
################################

# Options can be found at https://github.com/themepark-dev/theme.park
plex_themepark_enabled: false
plex_themepark_app: "plex"
plex_themepark_theme: "{{ global_themepark_theme }}"
plex_themepark_domain: "{{ global_themepark_domain }}"
plex_themepark_addons: []

################################
# Docker
################################

# Container
plex_docker_container: "{{ plex_name }}"

# Image
plex_docker_image_pull: true
plex_docker_image_repo: "plexinc/pms-docker"
plex_docker_image_tag: "latest"
plex_docker_image: "{{ lookup('vars', plex_name + '_docker_image_repo', default=plex_docker_image_repo)
                       + ':' + lookup('vars', plex_name + '_docker_image_tag', default=plex_docker_image_tag) }}"
# Platform
plex_docker_platform_map:
  x86_64: "linux/amd64"
  amd64: "linux/amd64"
  aarch64: "linux/arm64"
  arm64: "linux/arm64"
plex_docker_platform: "{{ plex_docker_platform_map[ansible_architecture] | default('linux/amd64') }}"


# Ports
plex_docker_ports_32400: "{{ port_lookup_32400.meta.port
                          if (port_lookup_32400.meta.port is defined) and (port_lookup_32400.meta.port | trim | length > 0)
                          else '32400' }}"

plex_docker_ports_defaults: []
plex_docker_ports_local:
  - "1900:1900/udp"
  - "5353:5353/udp"
  - "8324:8324"
  - "32410:32410/udp"
  - "32412:32412/udp"
  - "32414:32414/udp"
  - "32469:32469"
plex_docker_ports_ui:
  - "{{ plex_docker_ports_32400 }}:{{ lookup('vars', plex_name + '_web_port', default=plex_web_port) }}"
plex_docker_ports_custom: []
plex_docker_ports: "{{ lookup('vars', plex_name + '_docker_ports_defaults', default=plex_docker_ports_defaults)
                       + lookup('vars', plex_name + '_docker_ports_custom', default=plex_docker_ports_custom)
                       + (plex_docker_ports_local
                         if (lookup('vars', plex_name + '_open_local_ports', default=false))
                         else [])
                       + (lookup('vars', plex_name + '_docker_ports_ui', default=plex_docker_ports_ui)
                         if plex_open_main_ports
                         else []) }}"

# Envs
plex_docker_envs_advertise_ip_url: "{{ lookup('vars', plex_name + '_web_url', default=plex_web_url) + ':443,' + lookup('vars', plex_name + '_web_insecure_url', default=plex_web_insecure_url) + ':80'
                                    if plex_insecure
                                    else lookup('vars', plex_name + '_web_url', default=plex_web_url) + ':443' }}"
plex_docker_envs_advertise_ip: "{{ 'http://' + plex_lan_ip + ':32400,' + lookup('vars', plex_name + '_docker_envs_advertise_ip_url', default=plex_docker_envs_advertise_ip_url)
                                if (plex_lan_ip | length > 0) and plex_open_main_ports
                                else lookup('vars', plex_name + '_docker_envs_advertise_ip_url', default=plex_docker_envs_advertise_ip_url) }}"
plex_docker_envs_default:
  PLEX_UID: "{{ uid }}"
  PLEX_GID: "{{ gid }}"
  PLEX_CLAIM: "{{ (plex_claim_code) | default(omit) }}"
  CHANGE_CONFIG_DIR_OWNERSHIP: "false"
  TZ: "{{ tz }}"
  ADVERTISE_IP: "{{ plex_docker_envs_advertise_ip }}"
plex_docker_envs_custom: {}
plex_docker_envs: "{{ lookup('vars', plex_name + '_docker_envs_default', default=plex_docker_envs_default)
                      | combine(lookup('vars', plex_name + '_docker_envs_custom', default=plex_docker_envs_custom)) }}"

# Commands
plex_docker_commands_default: []
plex_docker_commands_custom: []
plex_docker_commands: "{{ lookup('vars', plex_name + '_docker_commands_default', default=plex_docker_commands_default)
                          + lookup('vars', plex_name + '_docker_commands_custom', default=plex_docker_commands_custom) }}"

# Volumes
plex_docker_volumes_default:
  - "{{ plex_paths_location }}:/config"
  - "{{ server_appdata_path }}/scripts:/scripts"
  - "/dev/shm:/dev/shm"
  - "{{ plex_paths_transcodes_location }}:/transcode"
plex_docker_volumes_legacy:
  - "/mnt/unionfs/Media:/data"
plex_docker_volumes_custom: []
plex_docker_volumes: "{{ lookup('vars', plex_name + '_docker_volumes_default', default=plex_docker_volumes_default)
                         + lookup('vars', plex_name + '_docker_volumes_custom', default=plex_docker_volumes_custom)
                         + (lookup('vars', plex_name + '_docker_volumes_legacy', default=plex_docker_volumes_legacy)
                           if docker_legacy_volume
                           else []) }}"

# Mounts
plex_docker_mounts_default:
  - target: /tmp
    type: tmpfs
plex_docker_mounts_custom: []
plex_docker_mounts: "{{ lookup('vars', plex_name + '_docker_mounts_default', default=plex_docker_mounts_default)
                        + lookup('vars', plex_name + '_docker_mounts_custom', default=plex_docker_mounts_custom) }}"

# Devices
plex_docker_devices_default: []
plex_docker_devices_custom: []
plex_docker_devices: "{{ lookup('vars', plex_name + '_docker_devices_default', default=plex_docker_devices_default)
                         + lookup('vars', plex_name + '_docker_devices_custom', default=plex_docker_devices_custom) }}"

# Hosts
plex_docker_hosts_default:
  metric.plex.tv: "{{ ip_address_localhost }}"
  metrics.plex.tv: "{{ ip_address_localhost }}"
  analytics.plex.tv: "{{ ip_address_localhost }}"
plex_docker_hosts_custom: {}
plex_docker_hosts: "{{ docker_hosts_common
                       | combine(lookup('vars', plex_name + '_docker_hosts_default', default=plex_docker_hosts_default))
                       | combine(lookup('vars', plex_name + '_docker_hosts_custom', default=plex_docker_hosts_custom)) }}"

# Labels
plex_docker_labels_default:
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}-http.entrypoints": "web" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}-http.service": "{{ lookup("vars", plex_name + "_webtools_web_subdomain", default=plex_webtools_web_subdomain) }}" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}-http.rule": "Host(`{{ plex_webtools_host }}`)" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}-http.middlewares": "{{ traefik_default_middleware_http }}" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}-http.priority": "20" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}.entrypoints": "websecure" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}.service": "{{ lookup("vars", plex_name + "_webtools_web_subdomain", default=plex_webtools_web_subdomain) }}" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}.rule": "Host(`{{ plex_webtools_host }}`)" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}.tls.options": "securetls@file" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}.tls.certresolver": "{{ plex_webtools_traefik_certresolver }}" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}.middlewares": "{{ plex_webtools_traefik_middleware }}" }'
  - '{ "traefik.http.routers.{{ plex_webtools_traefik_router }}.priority": "20" }'
  - '{ "traefik.http.services.{{ plex_webtools_traefik_router }}.loadbalancer.server.port": "{{ plex_webtools_web_port }}" }'
plex_docker_labels_custom: {}
plex_docker_labels: "{{ docker_labels_common
                        | combine((lookup('vars', plex_name + '_docker_labels_default', default=plex_docker_labels_default)
                                  if plex_plugin_webtools
                                  else {}),
                                  (traefik_themepark_labels
                                  if (plex_themepark_enabled and global_themepark_plugin_enabled)
                                  else {}),
                                  lookup('vars', plex_name + '_docker_labels_custom', default=plex_docker_labels_custom)) }}"

# Hostname
plex_docker_hostname: "{{ plex_name }}"

# Network Mode
plex_docker_network_mode_default: "{{ docker_networks_name_common }}"
plex_docker_network_mode: "{{ lookup('vars', plex_name + '_docker_network_mode_default', default=plex_docker_network_mode_default) }}"

# Networks
plex_docker_networks_alias: "{{ plex_name }}"
plex_docker_networks_default: []
plex_docker_networks_custom: []
plex_docker_networks: "{{ docker_networks_common
                          + lookup('vars', plex_name + '_docker_networks_default', default=plex_docker_networks_default)
                          + lookup('vars', plex_name + '_docker_networks_custom', default=plex_docker_networks_custom) }}"

# Capabilities
plex_docker_capabilities_default: []
plex_docker_capabilities_custom: []
plex_docker_capabilities: "{{ lookup('vars', plex_name + '_docker_capabilities_default', default=plex_docker_capabilities_default)
                              + lookup('vars', plex_name + '_docker_capabilities_custom', default=plex_docker_capabilities_custom) }}"

# Security Opts
plex_docker_security_opts_default: []
plex_docker_security_opts_custom: []
plex_docker_security_opts: "{{ lookup('vars', plex_name + '_docker_security_opts_default', default=plex_docker_security_opts_default)
                               + lookup('vars', plex_name + '_docker_security_opts_custom', default=plex_docker_security_opts_custom) }}"

# Restart Policy
plex_docker_restart_policy: unless-stopped

# State
plex_docker_state: started
