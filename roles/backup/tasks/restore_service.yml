#########################################################################
# Title:         Saltbox: Backup | Saltbox Restore Service              #
# Author(s):     desimaniac, l3uddz                                     #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Restore Service | Install 'curl'
  ansible.builtin.apt:
    name: curl
    state: present

- name: Restore Service | Set variables
  ansible.builtin.set_fact:
    restore_service_username: "{{ backup.restore_service.user | hash('sha1') }}"
    restore_service_password: "{{ backup.restore_service.pass }}"

- name: Restore Service | Cleanup '/tmp/restore_service' path
  ansible.builtin.file:
    path: "/tmp/restore_service"
    state: absent

- name: Restore Service | Create '/tmp/restore_service' path
  ansible.builtin.file:
    path: "/tmp/restore_service"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"

- name: Restore Service | Cleanup '/tmp/restore_service_temp' path
  ansible.builtin.file:
    path: "/tmp/restore_service_temp"
    state: absent

- name: Restore Service | Create '/tmp/restore_service_temp' path
  ansible.builtin.file:
    path: "/tmp/restore_service_temp"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"

- name: Restore Service | Copy Files to '/tmp/restore_service_temp' path
  ansible.builtin.shell: cp '{{ item }}' '/tmp/restore_service_temp/'
  become: true
  become_user: "{{ user.name }}"
  ignore_errors: true
  with_items:
    - "{{ playbook_dir }}/accounts.yml"
    - "{{ playbook_dir }}/settings.yml"
    - "{{ playbook_dir }}/adv_settings.yml"
    - "{{ playbook_dir }}/backup_config.yml"
    - "{{ playbook_dir }}/providers.yml"
    - "{{ playbook_dir }}/hetzner_vlan.yml"
    - "{{ playbook_dir }}/inventories/host_vars/localhost.yml"
    - "/home/{{ user.name }}/.config/rclone/rclone.conf"

- name: Restore Service | Encrypt config file(s)
  ansible.builtin.shell: >
    openssl enc -aes-256-cbc -pbkdf2 -in '{{ item }}' -out '/tmp/restore_service/{{ (item | basename)
    | regex_replace('^\\.', '') }}.enc' -k '{{ restore_service_password }}'
  become: true
  become_user: "{{ user.name }}"
  ignore_errors: true
  with_fileglob:
    - "/tmp/restore_service_temp/*"

- name: "Restore Service | Validate config file(s) for encryption."
  ansible.builtin.shell: "head -c 10 {{ item }} | grep -q Salted"
  register: encryption_check
  ignore_errors: true
  failed_when: encryption_check.rc > 1
  with_fileglob:
    - "/tmp/restore_service/*"

- name: Restore Service | Set variables
  ansible.builtin.set_fact:
    unencrypted_files_list: >
      {{ encryption_check.results | selectattr('rc', 'equalto', 1) | map(attribute='item') | map('regex_replace', '^/tmp/restore_service/|.enc$', '')
      | list | sort(case_sensitive=False) | join(', ') }}
    encrypted_files_list: >
      {{ encryption_check.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | map('regex_replace', '^/tmp/restore_service/|.enc$', '')
      | list | sort(case_sensitive=False) | join(', ') }}

- name: Restore Service | Print error message when config file(s) were not encrypted successfully
  ansible.builtin.debug:
    msg:
      - "The following config file(s) were NOT encrypted successfully: '{{ unencrypted_files_list | trim }}'"
      - "Saltbox Restore Service will now be skipped."
  when: (unencrypted_files_list | trim | length > 0)

- name: "Restore Service | Notify | Saltbox Backup: Config files were not encrypted successfully encrypted"
  ansible.builtin.include_role:
    name: notify
  vars:
    message: >
      {{ backup_instance }} Backup: The following config file(s) were NOT encrypted successfully: '{{ unencrypted_files_list | trim }}'.
      Restore Service will now be skipped.
  when: (unencrypted_files_list | trim | length > 0)

- name: Restore Service | Print error message when config file(s) were encrypted successfully
  ansible.builtin.debug:
    msg: "The following config file(s) were encrypted successfully: '{{ encrypted_files_list | trim }}'"
  when: (encrypted_files_list | trim | length > 0)

- name: Restore Service | Restore Service Upload Tasks
  when:
    - (unencrypted_files_list | trim | length == 0)
    - (encrypted_files_list | trim | length > 0)
  block:
    - name: Restore Service | Upload encrypted config file(s)
      ansible.builtin.shell: "curl -F 'file=@{{ item }}' 'https://crs.saltbox.dev/save/{{ restore_service_username }}/{{ (item | basename | splitext)[0] }}'"
      with_fileglob:
        - "/tmp/restore_service/*"
      register: files_upload

    - name: Restore Service | Set 'files_too_large_to_upload_list' variable
      ansible.builtin.set_fact:
        files_too_large_to_upload_list: >
          {{ files_upload.results | selectattr('stdout', 'search', 'too large') | map(attribute='item')
          | map('regex_replace', '^/tmp/restore_service/|.enc$', '') | list | sort(case_sensitive=False) | join(', ') }}

    - name: Restore Service | Print error mesage when config file(s) were too large to upload
      ansible.builtin.debug:
        msg: "The following encrypted config file(s) were too large to upload to the Saltbox Restore Service: '{{ files_too_large_to_upload_list | trim }}'"
      when: (files_too_large_to_upload_list | trim | length > 0)

    - name: "Restore Service | Notify | Saltbox Backup: Config files were too large to upload to the Saltbox Restore Service"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: >
          {{ backup_instance }} Backup: The following encrypted config file(s) were too large to upload to the Saltbox Restore Service:
          '{{ files_too_large_to_upload_list | trim }}'
      when: (files_too_large_to_upload_list | trim | length > 0)

    - name: Restore Service | Set 'files_uploaded_list' variable
      ansible.builtin.set_fact:
        files_uploaded_list: >
          {{ files_upload.results | selectattr('stdout', 'search', 'Successfull') | map(attribute='item')
          | map('regex_replace', '^/tmp/restore_service/|.enc$', '') | list | sort(case_sensitive=False) | join(', ') }}

    - name: Restore Service | Print success message when config file(s) were successfully uploaded
      ansible.builtin.debug:
        msg: "The following encrypted config file(s) were successfully uploaded to the Saltbox Restore Service: '{{ files_uploaded_list | trim }}'"
      when: (files_uploaded_list | trim | length > 0)

    - name: "Restore Service | Notify | Saltbox Backup: Config files were successfully encrypted and uploaded to the Saltbox Restore Service"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Config files uploaded to the Saltbox Restore Service."
      when: (files_uploaded_list | trim | length > 0)
