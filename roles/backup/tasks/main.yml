#########################################################################
# Title:         Saltbox: Backup Role                                   #
# Author(s):     l3uddz, desimaniac, RXWatcher1                         #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check if running without tags
  when: ('all' in ansible_run_tags)
  block:
    - name: "Notify | Saltbox Backup: Started Saltbox backup task"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Role cannot run without a tag."

    - name: Fail if running without a tag
      ansible.builtin.fail:
        msg:
          - "Backup Role cannot run without a tag."
          - "Use backup or backup2 tag."

- name: Backup
  block:
    - name: "Set 'backup_success' variable"
      ansible.builtin.set_fact:
        backup_success: false

    - name: Sanity Check
      ansible.builtin.include_tasks: "sanity_check.yml"

    - name: Variables
      ansible.builtin.include_tasks: "variables.yml"
      tags:
        - set-backup
        - unset-backup
        - restore-service
        - saltbox-restore-service
        - wipe-restore-service

    - name: Import Restore Service Cleanup
      ansible.builtin.include_tasks: "wipe_restore_service.yml"
      when: ('wipe-restore-service' in ansible_run_tags) and not ('backup' in ansible_run_tags)
      tags:
        - wipe-restore-service

    - name: Cron
      ansible.builtin.include_tasks: "cron.yml"
      when: ((['set-backup', 'unset-backup'] | intersect(ansible_run_tags)) | length > 0) and not ('backup' in ansible_run_tags)
      tags:
        - set-backup
        - unset-backup

    - name: Get Current Time
      ansible.builtin.shell: "date \"+%s\""
      register: start_time_lookup

    - name: "Set 'start_time' variable"
      ansible.builtin.set_fact:
        start_time: "{{ start_time_lookup.stdout }}"

    - name: Snapshot
      ansible.builtin.include_tasks: "snapshot.yml"

    - name: "Notify | Saltbox Backup: Started Saltbox backup task"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Started {{ use_snapshot | ternary('(snapshot-enabled) ', '') }}backup task."

    - name: "Create 'backup.lock'."
      ansible.builtin.file:
        path: "{{ playbook_dir }}/backup.lock"
        state: touch
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0664"

    - name: Check if previous backup folder exists
      ansible.builtin.stat:
        path: "{{ backup.local.destination }}"
      register: backup_local_folder

    - name: Check if previous backup exists locally
      ansible.builtin.find:
        paths: "{{ backup.local.destination }}"
        file_type: file
        patterns: '*.tar'
        recurse: true
      register: dir_files
      when: backup_local_folder.stat.exists and backup_local_folder.stat.isdir

    # Remove backup.old folder if it exists.
    - name: "Remove '{{ backup.local.destination }}.old'"
      ansible.builtin.file:
        path: "{{ backup.local.destination }}.old"
        state: absent

    - name: Move previous backup if it exists locally
      when: backup_local_folder.stat.exists and backup_local_folder.stat.isdir
      block:
        # Use mv because Ansible copy & delete takes a lot longer.
        - name: "Moving '{{ backup.local.destination }}' to '{{ backup.local.destination }}.old'"
          ansible.builtin.shell: "mv '{{ backup.local.destination }}' '{{ backup.local.destination }}.old'"
          become: true
          become_user: "{{ user.name }}"
          when: dir_files.matched | int != 0

    - name: "Create backup folders."
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        recurse: true
      with_items:
        - "/home/{{ user.name }}/logs"
        - "{{ backup.local.destination }}"
        - "{{ backup.local.destination }}/opt"
        - "/opt/systemd-backup"
        - "/opt/crontab-backup"

    # Check if there is enough space in the local backup destination
    - name: Get size of opt folder
      ansible.builtin.shell: "du -sk /opt || true"
      register: estimated_backup_size

    - name: Check existence of exclude folders
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ backup_size_exclude_folders }}"
      register: exclude_folders_stat

    - name: Create dictionary with folder paths and existence status
      ansible.builtin.set_fact:
        exclude_folders_info: "{{ dict(backup_size_exclude_folders | zip(exclude_folders_stat.results | map(attribute='stat.exists'))) }}"

    - name: Filter existing folders from exclude list
      ansible.builtin.set_fact:
        exclude_folders_existing: "{{ exclude_folders_info | dict2items | selectattr('value', 'eq', true) | map(attribute='key') | list }}"

    - name: Get size of existing excluded folders
      ansible.builtin.shell:
        cmd: "du -sk '{{ item }}' || true"
      loop: "{{ exclude_folders_existing }}"
      register: estimated_backup_size_excluded

    - name: Get amount of free disk space
      ansible.builtin.shell: "df '{{ backup.local.destination }}' --output=avail | tail -1"
      register: local_backup_destination_free_space

    - name: Calculate total estimated backup size
      ansible.builtin.set_fact:
        total_backup_size: "{{ estimated_backup_size.stdout.split()[0] }}"
        total_free_space: "{{ local_backup_destination_free_space.stdout }}"

    - name: Calculate excluded sizes
      ansible.builtin.set_fact:
        excluded_sizes: "{{ estimated_backup_size_excluded.results | map(attribute='stdout_lines') | map('first') | map('regex_replace', '^([0-9]+).*', '\\1') | map('int') | list }}"

    - name: Calculate backup_estimated_size
      ansible.builtin.set_fact:
        backup_estimated_size: "{{ (total_backup_size | int) - (excluded_sizes | default([]) | sum) }}"

    - name: Check if enough disk space is available
      ansible.builtin.set_fact:
        backup_enough_disk_space: "{{ (total_free_space | int) > (backup_estimated_size | int) }}"

    - name: "Notify | Saltbox Backup: Not enough disk space. Aborting."
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Not enough disk space. Aborting."
      when: (not backup_enough_disk_space)

    - name: "Fail when not enough disk space"
      ansible.builtin.fail:
        msg:
          - "Not enough disk space left in {{ backup.local.destination }}."
          - "Estimated Backup size: {{ backup_estimated_size | int }}"
          - "Free space: {{ total_free_space | int }}"
      when: (not backup_enough_disk_space)

    - name: "There is enough space to run the backup"
      ansible.builtin.debug:
        msg:
          - "There is enough disk space left in {{ backup.local.destination }}."
          - "Estimated Backup size: {{ backup_estimated_size | int }}"
          - "Free space: {{ total_free_space | int }}"

    # Backup config files
    - name: "Copy files to '{{ backup.local.destination }}'"
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ backup.local.destination }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0664"
        force: true
      with_items:
        - "{{ playbook_dir }}/ansible.cfg"
        - "{{ playbook_dir }}/accounts.yml"
        - "{{ playbook_dir }}/settings.yml"
        - "{{ playbook_dir }}/adv_settings.yml"
        - "{{ playbook_dir }}/backup_config.yml"
        - "{{ playbook_dir }}/providers.yml"
        - "{{ playbook_dir }}/hetzner_vlan.yml"
        - "{{ playbook_dir }}/inventories/host_vars/localhost.yml"
        - "/home/{{ user.name }}/.config/rclone/rclone.conf"
      ignore_errors: true

    # Backup the excludes list if it exists
    - name: "Look for 'backup_excludes_list.txt' file in saltbox folder"
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/backup_excludes_list.txt"
      register: backup_excludes_list

    - name: "Copy files to '{{ backup.local.destination }}'."
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/backup_excludes_list.txt"
        dest: "{{ backup.local.destination }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0664"
        force: true
      when: backup_excludes_list.stat.exists

    - name: Set 'backup_excludes_list_path' variable
      ansible.builtin.set_fact:
        backup_excludes_list_path: "{{
          (playbook_dir + '/backup_excludes_list.txt')
          if ((backup_excludes_list is defined) and (backup_excludes_list.stat.exists))
          else (playbook_dir + '/roles/backup/files/backup_excludes_list.txt') }}"

    - name: Saltbox Restore Service
      ansible.builtin.include_tasks: "restore_service.yml"
      when: restore_service_enabled
      tags:
        - restore-service
        - saltbox-restore-service

    - name: "Synchronize '/etc/systemd/system' to '/opt/systemd-backup' for inclusion in backup"
      ansible.builtin.shell: |
        /usr/bin/rsync \
          --delay-updates \
          -F \
          --compress \
          --archive \
          --no-recursive \
          --no-links \
          --no-perms \
          --exclude='saltbox_managed_*' \
          --include='*.service' \
          --include='*.mount' \
          /etc/systemd/system/* /opt/systemd-backup/
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: "Copying crontabs to '/opt/crontab-backup' for inclusion in backup"
      ansible.builtin.shell: "cp -f /var/spool/cron/crontabs/* /opt/crontab-backup"
      ignore_errors: true

    - name: "Reset permissions of folders"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        recurse: true
      with_items:
        - "/opt/systemd-backup"
        - "/opt/crontab-backup"

    # Stop Containers

    - name: "Gather Docker container information"
      community.docker.docker_host_info:
        containers: true
        containers_filters:
          label:
            - "com.github.saltbox.saltbox_managed=true"
          status:
            - "running"
      register: docker_info
      ignore_errors: true

    - name: Extract and process container names
      ansible.builtin.set_fact:
        docker_containers: "{{ docker_info.containers | map(attribute='Names') | map('first') | map('regex_replace', '^/', '') | reject('in', gluetun_instances | default(['gluetun'])) | sort }}"
      when:
        - (docker_info is success)
        - (docker_info.containers is defined)
        - (docker_info.containers | length > 0)

    - name: Set empty list if no containers found
      ansible.builtin.set_fact:
        docker_containers: []
      when: (docker_info is not success) or (docker_info.containers is not defined) or (docker_info.containers | length == 0)

    - name: Docker container tasks
      when: (docker_containers | length > 0)
      block:
        - name: Build list of containers to ignore
          ansible.builtin.set_fact:
            ignore_containers: "{{ reverse_proxy_apps + torrent_apps + backup_ignore_containers }}"

        - name: Filter out ignored apps from Docker containers list
          ansible.builtin.set_fact:
            docker_containers: "{{ docker_containers | difference(ignore_containers) }}"

        - name: Convert Docker containers list back to string
          ansible.builtin.set_fact:
            docker_containers_string: "{{ docker_containers | join(' ') }}"
            ignore_query_string: >-
              {% if docker_containers | length > 0 and ignore_containers | length > 0 %}
                {%- set ignore_params = [] -%}
                {% for container in ignore_containers %}
                  {%- set _ = ignore_params.append('ignore=' ~ container) -%}
                {%- endfor -%}
                {{ ignore_params | join('&') }}
              {%- else -%}
              {% endif %}

        - name: Stop Saltbox Docker containers
          ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/stop_saltbox_docker_containers.yml"
          vars:
            _query_var: "{{ '?' + ignore_query_string
                         if (ignore_query_string | length > 0)
                         else '' }}"

        - name: "Stop all running Docker containers"
          ansible.builtin.shell: "docker stop {{ docker_containers_string }}"
          ignore_errors: true
          when: (docker_containers_string | trim | length > 0)

        - name: "Notify | Saltbox Backup: Stopped Docker containers"
          ansible.builtin.include_role:
            name: notify
          vars:
            message: "{{ backup_instance }} Backup: Stopped Docker containers."
          when: backup_notify_stop_docker_containers

    # Custom User Files

    - name: "Copy custom files to '{{ backup.local.destination }}'"
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ backup.local.destination }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        force: true
      with_items:
        - "{{ backup_user_defined_files }}"
      when: (backup_user_defined_files | length > 0)

    # Services

    - name: Populate Service Facts
      ansible.builtin.service_facts:

      # Stop Cloudplow

    - name: Check if 'cloudplow.service' exists
      ansible.builtin.stat:
        path: "/etc/systemd/system/cloudplow.service"
      register: cloudplow_service

    - name: Stop 'cloudplow' service block
      when: (cloudplow_service is defined) and cloudplow_service.stat.exists
      block:
        - name: Get 'cloudplow' service state
          ansible.builtin.set_fact:
            cloudplow_service_running: "{{ (services['cloudplow.service'] is defined) and (services['cloudplow.service']['state'] == 'running') }}"

        - name: Stop 'cloudplow' service
          ansible.builtin.systemd_service:
            name: cloudplow
            state: stopped
          when: cloudplow_service_running

    # Create snapshot

    - name: Create Snapshot
      when: use_snapshot
      block:
        - name: "Snapshot | Wait for 5 seconds before creating snapshot"
          ansible.builtin.wait_for:
            timeout: 5

        - name: Snapshot | Display snapshot source and destination
          ansible.builtin.debug:
            msg: "Creating snapshot of '{{ backup_snapshot_source_path }}' at '{{ backup_snapshot_destination_path }}' ..."

        - name: Snapshot | Create BTRFS snapshot
          ansible.builtin.shell: 'btrfs subvolume snapshot {{ backup_snapshot_source_path }} {{ backup_snapshot_destination_path }}'
          when: (snapshot_type == 'btrfs')

        - name: Snapshot | Display new backup source location in snapshot
          ansible.builtin.debug:
            msg: "Backup will now archive folders from '{{ backup_opt_path }}'"

    # Start Docker containers when snapshot is enabled

    - name: Snapshot | Start Docker containers
      when: use_snapshot
      block:
        - name: "Snapshot | Wait for 5 seconds before starting Docker containers"
          ansible.builtin.wait_for:
            timeout: 5

        - name: Start Saltbox Docker containers
          ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/start_saltbox_docker_containers.yml"
          when: (docker_containers_string is defined) and (docker_containers_string | trim | length > 0)

        - name: "Snapshot | Start all previously running Docker containers"
          ansible.builtin.shell: 'docker start {{ docker_containers_string }}'
          ignore_errors: true
          when: (docker_containers_string is defined) and (docker_containers_string | trim | length > 0)

        - name: "Snapshot | Notify | Saltbox Backup: Started Docker containers"
          ansible.builtin.include_role:
            name: notify
          vars:
            message: "{{ backup_instance }} Backup: Started Docker containers."
          when: (docker_containers_string is defined) and (docker_containers_string | trim | length > 0) and backup_notify_start_docker_containers

    - name: "Get list of all folders in '{{ backup_opt_path }}'"
      ansible.builtin.find:
        paths: "{{ backup_opt_path }}"
        recurse: false
        file_type: directory
      register: opt_folders_temp

    - name: Create 'opt_folders' variable
      ansible.builtin.set_fact:
        opt_folders: []

    - name: Add folder list to 'opt_folders' variable
      ansible.builtin.set_fact:
        opt_folders: "{{ opt_folders + [item.path] }}"
      with_items: "{{ opt_folders_temp.files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: "Archiving '{{ backup_opt_path }}' folders into '{{ backup.local.destination }}/'"
      ansible.builtin.shell: |
        tar \
          --ignore-failed-read \
          --warning=no-file-changed \
          --warning=no-file-removed \
          --exclude='./snapshots' \
          --exclude-from '{{ backup_excludes_list_path }}' \
          -cf '{{ backup.local.destination }}/opt/{{ item | basename }}.tar' -C '{{ item | dirname }}' './{{ item | basename }}' \
          > /dev/null
      args:
        executable: /bin/bash
      with_items: "{{ opt_folders }}"
      loop_control:
        label: "'{{ item }}' --> '{{ backup.local.destination }}/opt/{{ item | basename }}.tar'"
      ignore_errors: true

    - name: Snapshot | Cleanup Tasks
      when: use_snapshot and (snapshot_type == 'btrfs')
      block:
        - name: Snapshot | Check if BTRFS snapshot is mounted
          ansible.builtin.stat:
            path: "{{ backup_snapshot_destination_path }}"
          register: btrfs_snapshot_mounted

        - name: Snapshot | Delete BTRFS snapshot
          when: (btrfs_snapshot_mounted.stat.isdir is defined) and btrfs_snapshot_mounted.stat.isdir
          block:
            - name: Snapshot | Delete existing BTRFS snapshot (1/2)
              ansible.builtin.command: "btrfs subvolume delete {{ backup_snapshot_destination_path }}"
              register: snapshot_deletion
              ignore_errors: true

            - name: Snapshot | Delete existing BTRFS snapshot (2/2)
              ansible.builtin.file:
                path: "{{ backup_snapshot_destination_path }}"
                state: absent
              ignore_errors: true
              when: (snapshot_deletion is failed)

    - name: Check if tarball files were created
      ansible.builtin.find:
        paths: "{{ backup.local.destination }}/opt/"
        file_type: file
        patterns: '*.tar'
      register: dir_files2

    - name: Abort backup when the creation of tarball files fails
      ansible.builtin.fail:
        msg: "There must have been an issue during the tarball creation tasks as they are missing in '{{ backup.local.destination }}/opt/'"
      when: (dir_files2.matched | int == 0)

    - name: "Remove '{{ backup.local.destination }}.old'"
      ansible.builtin.file:
        path: "{{ backup.local.destination }}.old"
        state: absent
      become: true
      become_user: "{{ user.name }}"
      when: (dir_files2.matched | int != 0)

    - name: "Get size of '{{ backup.local.destination }}'"
      ansible.builtin.shell: du -s -B1 --apparent-size {{ backup.local.destination }} | awk '{print $1}'
      register: backup_new

    - name: "Set backup_size"
      ansible.builtin.set_fact:
        backup_size: "{{ (backup_new.stdout | int) | filesizeformat }}"

    - name: "Notify | Saltbox Backup: Backup created with total size of {{ backup_size }}."
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Backup created with total size of {{ backup_size }}."
      ignore_errors: true
      when: backup_notify_size

    # Start Docker containers when snapshot is not enabled

    - name: Start Docker Containers
      when: (not use_snapshot)
      block:
        - name: "Wait for 5 seconds before starting Docker containers"
          ansible.builtin.wait_for:
            timeout: 5

        - name: Start Saltbox Docker containers
          ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/start_saltbox_docker_containers.yml"
          when: (docker_containers_string | trim | length > 0)

        - name: "Start all previously running Docker containers"
          ansible.builtin.shell: 'docker start {{ docker_containers_string }}'
          ignore_errors: true
          when: (docker_containers_string | trim | length > 0)

        - name: "Notify | Saltbox Backup: Started Docker containers"
          ansible.builtin.include_role:
            name: notify
          vars:
            message: "{{ backup_instance }} Backup: Started Docker containers."
          when: (docker_containers_string | trim | length > 0) and backup_notify_start_docker_containers

    - name: "Wait for 10 seconds before uploads"
      ansible.builtin.wait_for:
        timeout: 10
      when: backup_rclone_enabled or backup_rsync_enabled

    - name: "Reset folder ownership of '{{ backup.local.destination }}/'"
      ansible.builtin.shell: "chown -R {{ user.name }}:{{ user.name }} {{ backup.local.destination }}/"
      ignore_errors: true

    # Reset mod dates to avoid conflicts during rclone backup. Ansible module doesn't touch folder contents via wildcard.
    - name: "Reset permissions and mod dates to files in '{{ backup.local.destination }}/'"
      ansible.builtin.shell: find '{{ backup.local.destination }}' -type f  -exec touch {} +
      become: true
      become_user: "{{ user.name }}"
      args:
        executable: /bin/bash

    # Due to a touch command in a previous backup, all files on rclone.destination have same mod dates, therefore, only one file's mod date is needed.
    - name: "Get datestamp for previous '{{ backup.rclone.destination }}/settings.yml'"
      ansible.builtin.shell: |
        /usr/bin/rclone lsl \
          {{ backup.rclone.destination }}/settings.yml \
          {{ "--user-agent='" + backup_user_agent + "'" if (backup_user_agent | length > 0) else "" }} \
          | sed -e 's/^[ \t]*//' | cut -d ' ' -f 2,3 | cut -d '.' -f 1 | sed s/' '/_/g | sed s/':'/./g
      environment: "{{ backup_rclone_env }}"
      become: true
      become_user: "{{ user.name }}"
      register: rclone_timestamp
      ignore_errors: true
      when: backup_rclone_enabled

    - name: Define Archive List
      ansible.builtin.set_fact:
        backup_archive_list:
          - "opt"
          - "ansible.cfg"
          - "accounts.yml"
          - "settings.yml"
          - "adv_settings.yml"
          - "backup_config.yml"
          - "providers.yml"
          - "rclone.conf"
          - "localhost.yml"
          - "hetzner_vlan.yml"
          - "backup_excludes.txt"
          - "backup_excludes_list.txt"

    # If rclone_timestamp is blank, default the naming of files to '/archived/old/filename.ext', else /archived/date/filename.ext.
    - name: "Archive previous files in '{{ backup.rclone.destination }}'"
      ansible.builtin.shell: |
        /usr/bin/rclone moveto \
          {{ "--user-agent='" + backup_user_agent + "'" if (backup_user_agent | length > 0) else "" }} \
          '{{ backup.rclone.destination }}/{{ item }}' \
          '{{ backup.rclone.destination }}/archived/{{ (rclone_timestamp.stdout) if (rclone_timestamp is defined) else 'old' }}/{{ item }}' \
          2>/dev/null
      environment: "{{ backup_rclone_env }}"
      become: true
      become_user: "{{ user.name }}"
      register: rclone_move
      failed_when: rclone_move.rc > 3
      ignore_errors: true
      when: backup_rclone_enabled and (rclone_timestamp is defined) and ('Failed' not in rclone_timestamp.stderr)
      loop: "{{ backup_archive_list + (backup_user_defined_files | map('basename') | list) }}"

    - name: "Wait for 5 seconds before uploading"
      ansible.builtin.wait_for:
        timeout: 5
      when: backup_rclone_enabled or backup_rsync_enabled

    - name: "Use rclone to upload backup to '{{ backup.rclone.destination }}'"
      ansible.builtin.shell: |
        /usr/bin/rclone copy \
          {{ "--user-agent='" + backup_user_agent + "'" if (backup_user_agent | length > 0) else "" }} \
          --transfers="{{ backup_rclone_transfers }}" \
          {{ lookup('vars', 'backup_' + backup.rclone.template + '_template', default='') }} \
          --stats=30s \
          --bwlimit={{ backup_rclone_upload_speed_limit }} \
          {{ '--bind=' + ansible_default_ipv4.address if rclone_mounts_ipv4_only else '' }} \
          -vv \
          --log-file='{{ playbook_dir }}/backup_rclone.log' \
          '{{ backup.local.destination }}' '{{ backup.rclone.destination }}'
      environment: "{{ backup_rclone_env }}"
      become: true
      become_user: "{{ user.name }}"
      when: backup_rclone_enabled

    - name: "Notify | Saltbox Backup: Rclone uploaded backup to '{{ backup.rclone.destination }}'"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Rclone uploaded backup to '{{ backup.rclone.destination }}'."
      when: backup_rclone_enabled and backup_notify_rclone_complete

    - name: "Use rsync to upload backup to '{{ backup.rsync.destination }}'"
      ansible.posix.synchronize:
        src: "{{ backup.local.destination }}/"
        dest: "{{ backup.rsync.destination }}/"
        set_remote_user: true
        compress: false
        dest_port: "{{ backup.rsync.port }}"
      become: true
      become_user: "{{ user.name }}"
      when: backup_rsync_enabled

    - name: "Notify | Saltbox Backup: Rsync uploaded backup to '{{ backup.rsync.destination }}'"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Rsync uploaded backup to '{{ backup.rsync.destination }}'."
      when: backup_rsync_enabled and backup_notify_rsync_complete

    - name: Get Current Time
      ansible.builtin.shell: "date \"+%s\""
      register: end_time_lookup

    - name: "Set 'end_time' variable"
      ansible.builtin.set_fact:
        end_time: "{{ end_time_lookup.stdout }}"

    - name: "Calculate Total Time"
      ansible.builtin.set_fact:
        total_time: "{{ (((end_time | int) - (start_time | int)) / 60) | int | abs }}"

    - name: "Notify | Saltbox Backup: Finished Saltbox backup task in {{ total_time }} minutes"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Finished Saltbox {{ use_snapshot | ternary('(snapshot-enabled) ', '') }}backup task in {{ total_time }} minutes."

    - name: "Start 'cloudplow' service"
      ansible.builtin.systemd_service:
        name: cloudplow
        state: started
      when: (cloudplow_service is defined) and cloudplow_service.stat.exists and cloudplow_service_running

    - name: "Remove {{ backup.local.destination }}"
      ansible.builtin.file:
        path: "{{ backup.local.destination }}"
        state: absent
      when: (dir_files2.matched | int != 0) and (not backup_local_enabled)

    - name: "Set 'backup_success' variable"
      ansible.builtin.set_fact:
        backup_success: true

    - name: Backup Status - Success
      ansible.builtin.debug:
        msg: "Backup Completed Successfully."

  rescue:
    - name: Snapshot | Cleanup Tasks
      when: use_snapshot and (snapshot_type == 'btrfs')
      block:
        - name: Snapshot | Check if BTRFS snapshot is mounted
          ansible.builtin.stat:
            path: "{{ backup_snapshot_destination_path }}"
          register: btrfs_snapshot_mounted

        - name: Snapshot | Delete BTRFS snapshot
          when: (btrfs_snapshot_mounted.stat.isdir is defined) and btrfs_snapshot_mounted.stat.isdir
          block:
            - name: Snapshot | Delete existing BTRFS snapshot (1/2)
              ansible.builtin.command: "btrfs subvolume delete {{ backup_snapshot_destination_path }}"
              register: snapshot_deletion
              ignore_errors: true

            - name: Snapshot | Delete existing BTRFS snapshot (2/2)
              ansible.builtin.file:
                path: "{{ backup_snapshot_destination_path }}"
                state: absent
              ignore_errors: true
              when: (snapshot_deletion is failed)

    - name: "Reset folder ownership of '{{ backup.local.destination }}/'"
      ansible.builtin.shell: "chown -R {{ user.name }}:{{ user.name }} {{ backup.local.destination }}/"
      ignore_errors: true

    - name: Start Docker Containers
      when: (not use_snapshot)
      block:
        - name: "Wait for 5 seconds before starting Docker containers"
          ansible.builtin.wait_for:
            timeout: 5

        - name: Start Saltbox Docker containers
          ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/start_saltbox_docker_containers.yml"
          when: (docker_containers_string is defined) and (docker_containers_string | trim | length > 0)

        - name: "Start all previously running Docker containers"
          ansible.builtin.shell: 'docker start {{ docker_containers_string }}'
          ignore_errors: true
          when: (docker_containers_string is defined) and (docker_containers_string | trim | length > 0)

    - name: "Start 'cloudplow' service"
      ansible.builtin.systemd_service:
        name: cloudplow
        state: started
      when: (cloudplow_service is defined) and cloudplow_service.stat.exists and cloudplow_service_running

    - name: Backup Status - Failure
      ansible.builtin.debug:
        msg: 'Backup terminated due to an error'

    - name: "Notify | Saltbox Backup: Backup terminated due to an error"
      ansible.builtin.include_role:
        name: notify
      vars:
        message: "{{ backup_instance }} Backup: Backup terminated due to an error."

  always:
    - name: "Remove 'backup.lock'"
      ansible.builtin.file:
        path: "{{ playbook_dir }}/backup.lock"
        state: absent

    - name: "Reset logs folder ownership."
      ansible.builtin.shell: "chown -R {{ user.name }}:{{ user.name }} '/home/{{ user.name }}/logs/'"
      ignore_errors: true

- name: Backup Cleanup Block
  when: backup_rclone_enabled and backup_cleanup_enabled and backup_success
  block:
    - name: Determine number of existing backups
      ansible.builtin.shell: >
        rclone lsd {{ backup.rclone.destination }}/archived | awk '{print $NF}' | sort
      register: backup_list
      become: true
      become_user: "{{ user.name }}"

    - name: Print existing backups status
      ansible.builtin.debug:
        msg: "Rclone returned an error so the remote is likely wrong or this is running against no archived backups."
      when: backup_list.stderr_lines is search('directory not found', ignorecase=True)

    - name: Set excess backups
      ansible.builtin.set_fact:
        excess_backups: "{{ backup_list.stdout_lines | length - backup_cleanup_number }}"
      when: backup_list.stdout_lines | length > backup_cleanup_number

    - name: Delete excess backups
      ansible.builtin.shell: >
        rclone purge {{ backup.rclone.destination }}/archived/{{ item if (item | length > 0) else 'non-existent-folder-name' }}{{ (' ' + backup_cleanup_custom_rclone_flags) if backup_cleanup_custom_rclone_flags | length > 0 else '' }}
      loop: "{{ backup_list.stdout_lines[: (excess_backups | int)] }}"
      when:
        - excess_backups is defined
        - backup_list.stderr_lines is not search('directory not found', ignorecase=True)
      become: true
      become_user: "{{ user.name }}"
