#########################################################################
# Title:         Saltbox: Plex Auth Token Role                          #
# Author(s):     EnorMOZ, Desimaniac, salty                             #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check if Plex instance is defined
  ansible.builtin.set_fact:
    plex_name: "{{ plex_name | default(plex_instances[0]) }}"

- name: "Auth Token | Create directories"
  ansible.builtin.file:
    path: "{{ server_appdata_path }}/saltbox"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"

- name: "Auth Token | Check if PIN exists"
  ansible.builtin.stat:
    path: "{{ plex_auth_token_ini_file }}"
  register: plex_ini

- name: "Auth Token | plex_auth_client_identifier"
  when: plex_ini.stat.exists
  block:
    - name: "Auth Token | Lookup plex_auth_client_identifier"
      ansible.builtin.set_fact:
        plex_auth_client_identifier: "{{ lookup('ini', 'client_identifier section=' + plex_name + ' file=' + plex_auth_token_ini_file) }}"
        plex_auth_client_identifier_missing: false

  rescue:
    - name: "Auth Token | Set plex_auth_client_identifier to empty string"
      ansible.builtin.set_fact:
        plex_auth_client_identifier: ""
        plex_auth_client_identifier_missing: true

- name: "Auth Token | Generate new plex_auth_client_identifier"
  ansible.builtin.set_fact:
    plex_auth_client_identifier: "Saltbox{{ lookup('password', '/dev/null', chars=['ascii_lowercase', 'digits'], length=8) }}"
  when: (not plex_ini.stat.exists) or plex_auth_client_identifier_missing

- name: "Auth Token | Set plex_auth_token variable if previously saved"
  ansible.builtin.set_fact:
    plex_auth_token: "{{ lookup('ini', 'token section=' + plex_name + ' file=' + plex_auth_token_ini_file) | regex_replace('\n', '') }}"
  when: plex_ini.stat.exists and (not plex_auth_client_identifier_missing)

- name: "Auth Token | Set plex_no_token status"
  ansible.builtin.set_fact:
    plex_no_token: "{{ (not plex_ini.stat.exists) or plex_auth_client_identifier_missing | ternary(true, false) }}"

- name: "Auth Token | Network Container Health Status"
  ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/network_container_health_status.yml"
  vars:
    _var_prefix: "plex"
  when: (plex_role_proxy_lookup | length > 0)

- name: "Auth Token | Check if Token is valid"
  ansible.builtin.uri:
    url: "https://plex.tv/api/v2/user"
    method: GET
    return_content: true
    body:
      X-Plex-Token: "{{ lookup('ini', 'token section=' + plex_name + ' file=' + plex_auth_token_ini_file) }}"
      X-Plex-Version: "{{ plex_auth_token_version }}"
      X-Plex-Product: "{{ plex_auth_token_product }}"
      X-Plex-Client-Identifier: "{{ plex_auth_client_identifier }}"
      X-Plex-Platform: "{{ plex_auth_token_platform }}"
      X-Plex-Platform-Version: "{{ plex_auth_token_platform_version }}"
      X-Plex-Device: "{{ plex_auth_token_device }}"
      X-Plex-Device-Name: "{{ plex_auth_token_device_name }}"
    body_format: form-urlencoded
    headers:
      Accept: "application/json"
    status_code: [200, 401]
  environment: "{{ plex_proxy_dict }}"
  register: plex_token
  when: plex_ini.stat.exists and (not plex_auth_client_identifier_missing)

- name: "Auth Token | Generate New Token"
  when: plex_no_token or (plex_token.status == 401)
  block:
    - name: "Auth Token | Generate PIN"
      ansible.builtin.uri:
        url: "https://plex.tv/api/v2/pins"
        method: POST
        return_content: true
        body:
          strong: "true"
          X-Plex-Version: "{{ plex_auth_token_version }}"
          X-Plex-Product: "{{ plex_auth_token_product }}"
          X-Plex-Client-Identifier: "{{ plex_auth_client_identifier }}"
          X-Plex-Platform: "{{ plex_auth_token_platform }}"
          X-Plex-Platform-Version: "{{ plex_auth_token_platform_version }}"
          X-Plex-Device: "{{ plex_auth_token_device }}"
          X-Plex-Device-Name: "{{ plex_auth_token_device_name }}"
        body_format: form-urlencoded
        headers:
          Accept: "application/json"
        status_code: 201
      environment: "{{ plex_proxy_dict }}"
      register: plex_pin

    - name: "Auth Token | Prompt user to login"
      ansible.builtin.pause:
        prompt: "Please open https://app.plex.tv/auth#?clientID={{ plex_pin.json.clientIdentifier }}&code={{ plex_pin.json.code }}&context%5Bdevice%5D%5Bproduct%5D={{ plex_pin.json.product }} and login. Hit enter after having logged in"  # noqa 204 line-length

    - name: "Auth Token | Check PIN"
      ansible.builtin.uri:
        url: "https://plex.tv/api/v2/pins/{{ plex_pin.json.id }}"
        method: GET
        return_content: true
        body:
          X-Plex-Client-Identifier: "{{ plex_auth_client_identifier }}"
        body_format: form-urlencoded
        headers:
          Accept: "application/json"
        status_code: 200
      environment: "{{ plex_proxy_dict }}"
      register: plex_token_new

    - name: "Auth Token | Set plex_auth_token variable"
      ansible.builtin.set_fact:
        plex_auth_token: "{{ plex_token_new.json.authToken | regex_replace('\n', '') }}"

    - name: "Auth Token | Check if new Token is valid"
      ansible.builtin.uri:
        url: "https://plex.tv/api/v2/user"
        method: GET
        return_content: true
        body:
          X-Plex-Token: "{{ plex_auth_token }}"
          X-Plex-Version: "{{ plex_auth_token_version }}"
          X-Plex-Product: "{{ plex_auth_token_product }}"
          X-Plex-Client-Identifier: "{{ plex_auth_client_identifier }}"
          X-Plex-Platform: "{{ plex_auth_token_platform }}"
          X-Plex-Platform-Version: "{{ plex_auth_token_platform_version }}"
          X-Plex-Device: "{{ plex_auth_token_device }}"
          X-Plex-Device-Name: "{{ plex_auth_token_device_name }}"
        body_format: form-urlencoded
        headers:
          Accept: "application/json"
        status_code: [200, 401]
      environment: "{{ plex_proxy_dict }}"
      register: plex_new_token

    - name: "Auth Token | Fail if new token is invalid"
      ansible.builtin.fail:
        msg: "Something went wrong with the creation of the new token"
      when: (plex_new_token.status == 401)

    - name: "Auth Token | Save facts for a specific instance"
      saltbox_facts:
        role: "plex"
        instance: "{{ plex_name }}"
        keys:
          client_identifier: "{{ plex_auth_client_identifier }}"
          token: "{{ plex_auth_token }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        base_path: "{{ server_appdata_path }}"
        overwrite: true

- name: "Auth Token | Display Plex Auth Token"
  ansible.builtin.debug:
    msg: "Plex Auth Token: {{ plex_auth_token }}"

- name: Change permissions
  ansible.builtin.file:
    path: "{{ server_appdata_path }}/saltbox"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0755"
    recurse: true
