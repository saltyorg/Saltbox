#########################################################################
# Title:         Saltbox: Cloudplow Role                                #
# Author(s):     l3uddz, desimaniac, salty                              #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Delete Legacy Service
  ansible.builtin.include_tasks: "{{ resources_tasks_path }}/systemd/delete_service.yml"
  vars:
    _service_name: "{{ cloudplow_service_name_old }}"

- name: Reset Cloudplow directory
  ansible.builtin.file:
    path: "{{ cloudplow_path }}"
    state: absent
  when: ('cloudplow-reset' in ansible_run_tags)

- name: Filter Rclone remotes
  ansible.builtin.set_fact:
    cloudplow_remotes: "{{ rclone.remotes | selectattr('settings.upload', 'equalto', True) | list }}"

- name: Cloudplow tasks
  when: (cloudplow_remotes | length > 0)
  block:
    - name: Check if Plex instance is defined
      ansible.builtin.set_fact:
        plex_name: "{{ plex_name | default(plex_instances[0]) }}"

    - name: Stop Service
      ansible.builtin.include_tasks: "{{ resources_tasks_path }}/systemd/stop_service.yml"
      vars:
        _service_name: "{{ cloudplow_service_name }}"

    - name: Create directory
      ansible.builtin.file:
        path: "{{ cloudplow_path }}"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        recurse: true

    - name: Clone project git repo
      ansible.builtin.include_tasks: "{{ resources_tasks_path }}/git/clone_git_repo.yml"
      vars:
        git_repo_url: "{{ cloudplow_git_repo_url }}"
        git_repo_dest: "{{ cloudplow_git_repo_dest }}"
        git_repo_branch_primary: "{{ cloudplow_git_repo_branch_primary }}"
        git_repo_branch_secondary: "{{ cloudplow_git_repo_branch_secondary }}"

    - name: Set Python version
      ansible.builtin.set_fact:
        cloudplow_python: "{{ 'python3'
                           if ansible_distribution_version is version('20.04', '==')
                           else 'python3.8' }}"

    - name: "Execute Python role"
      ansible.builtin.include_role:
        name: "python"
      vars:
        python_version: "3.8"
      when: ansible_distribution_version is version('20.04', '!=')

    - name: Delete venv folder
      ansible.builtin.file:
        path: "{{ cloudplow_venv_path }}"
        state: absent

    - name: Create venv
      ansible.builtin.command:
        cmd: "{{ cloudplow_python }} -m venv {{ cloudplow_venv_path }}"
      args:
        creates: "{{ cloudplow_venv_path }}"
      become: true
      become_user: "{{ user.name }}"

    - name: Install pip requirements
      ansible.builtin.pip:
        requirements: "{{ cloudplow_requirements_path }}"
        virtualenv: "{{ cloudplow_venv_path }}"
        virtualenv_command: "{{ cloudplow_venv_path }}/bin/python3 -m pip"
      become: true
      become_user: "{{ user.name }}"

    - name: Set script as executable
      ansible.builtin.file:
        path: "{{ cloudplow_script_path }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: a+x

    - name: Create script alias
      ansible.builtin.template:
        src: cloudplow.sh.j2
        dest: "{{ cloudplow_alias_path }}"
        mode: "0755"
        force: true

    - name: Import Settings Task
      ansible.builtin.include_tasks: "subtasks/settings.yml"

    - name: Import '{{ cloudplow_service_name }}.service'
      ansible.builtin.template:
        src: cloudplow.service.j2
        dest: "/etc/systemd/system/{{ cloudplow_service_name }}.service"
        mode: "0644"
        force: true

    - name: Start service
      ansible.builtin.systemd_service:
        name: "{{ cloudplow_service_name }}"
        state: started
        enabled: true
        daemon_reload: true

- name: Cloudplow Skipped
  ansible.builtin.debug:
    msg: "Cloudplow was skipped due to no remotes having upload enabled."
  when: not (cloudplow_remotes | length > 0)
