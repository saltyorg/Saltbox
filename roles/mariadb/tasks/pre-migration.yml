#########################################################################
# Title:         Saltbox: MariaDB Pre-Migration                         #
# Author(s):     owine, salty                                           #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check for '{{ server_appdata_path }}/mariadb/databases'
  ansible.builtin.stat:
    path: "{{ server_appdata_path }}/mariadb/databases"
  register: subfolder

- name: Dump and backup databases
  when: subfolder.stat.exists
  block:
    - name: Create Docker Container # noqa args[module]
      community.docker.docker_container:
        command_handling: compatibility
        container_default_behavior: compatibility
        default_host_ip: ""
        env:
          PUID: "{{ uid }}"
          PGID: "{{ gid }}"
          TZ: "{{ tz }}"
          MYSQL_ROOT_PASSWORD: "{{ lookup('role_var', '_docker_envs_mysql_root_password', role='mariadb') }}"
        hostname: "mariadb"
        image: "{{ lookup('role_var', '_docker_image_migration', role='mariadb') }}"
        log_driver: "{{ (docker_log_driver != 'default') | ternary(docker_log_driver, lookup('vars', role_name + '_docker_log_driver', default=omit)) }}"
        log_options: "{{ (docker_log_options != 'default') | ternary(docker_log_options, lookup('vars', role_name + '_docker_log_options', default=omit)) }}"
        name: "mariadb"
        network_mode: "{{ docker_networks_name_common }}"
        networks: "{{ lookup('vars', role_name + '_docker_networks') }}"
        networks_cli_compatible: true
        pull: "{{ lookup('vars', role_name + '_docker_image_pull', default=true) | bool }}"
        restart_policy: "{{ lookup('vars', role_name + '_docker_restart_policy', default='unless-stopped') }}"
        state: started
        stop_timeout: "{{ lookup('vars', role_name + '_docker_stop_timeout', default='10') }}"
        volumes: "{{ lookup('role_var', '_docker_volumes_migration', role='mariadb') }}"

    - name: Wait for 30 seconds
      ansible.builtin.wait_for:
        timeout: 30

    - name: Creating database dump
      ansible.builtin.shell: |
        docker exec mariadb sh -c 'exec mariadb-dump --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"' > {{ server_appdata_path }}/mariadb/dump.sql

    - name: Wait for 5 seconds
      ansible.builtin.wait_for:
        timeout: 5

    - name: Remove existing Docker container
      ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/remove_docker_container.yml"
      vars:
        var_prefix: "mariadb"

    - name: Relocate '{{ server_appdata_path }}/mariadb' to '{{ server_appdata_path }}/mariadb_legacy'
      ansible.builtin.shell: "mv {{ server_appdata_path }}/mariadb {{ server_appdata_path }}/mariadb_legacy"
      register: relocate

    - name: Wait for 5 seconds
      ansible.builtin.wait_for:
        timeout: 5

    - name: Remove '{{ server_appdata_path }}/mariadb/'
      ansible.builtin.file:
        path: "{{ server_appdata_path }}/mariadb/"
        state: absent
      when: relocate.rc == 0
