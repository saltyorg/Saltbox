#########################################################################
# Title:         Saltbox: Docker | Controller Tasks                     #
# Author(s):     salty                                                  #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Controller | Execute Python role
  ansible.builtin.include_role:
    name: "python"
  vars:
    python_version: "{{ docker_controller_python_version }}"

- name: "Controller | Lookup Python {{ docker_controller_python_version }} installation"
  ansible.builtin.command: "{{ python_bin }} python find {{ docker_controller_python_version }} --managed-python"
  register: docker_controller_python_install_path_lookup
  changed_when: false
  environment: "{{ python_environment }}"
  become: true
  become_user: "{{ user.name }}"

- name: Controller | Set Python version
  ansible.builtin.set_fact:
    docker_controller_python_install_path: "{{ docker_controller_python_install_path_lookup.stdout }}"

- name: Controller | Delete venv folder
  ansible.builtin.file:
    path: "{{ docker_controller_venv_path }}"
    state: absent

- name: Controller | Create venv
  ansible.builtin.command:
    cmd: "{{ docker_controller_python_install_path }} -m venv {{ docker_controller_venv_path }}"
  args:
    creates: "{{ docker_controller_venv_path }}"
  become: true
  become_user: "{{ user.name }}"

- name: Controller | Install pip requirements
  ansible.builtin.pip:
    requirements: "/srv/git/saltbox/requirements/requirements-docker-controller.txt"
    virtualenv: "{{ docker_controller_venv_path }}"
    virtualenv_command: "{{ docker_controller_venv_path }}/bin/python3 -m pip"
  become: true
  become_user: "{{ user.name }}"

- name: Controller | Find pip3 path
  ansible.builtin.find:
    paths: "/srv/docker-controller/venv"
    recurse: true
    patterns: 'uvicorn'
  register: docker_controller_venv_files

- name: Controller | Path
  ansible.builtin.set_fact:
    docker_controller_uvicorn_path: "{{ docker_controller_venv_files.files[0].path }}"

- name: Controller | Import 'saltbox_managed_docker_controller.service'
  ansible.builtin.template:
    src: docker-controller.service.j2
    dest: /etc/systemd/system/saltbox_managed_docker_controller.service
    mode: "0644"
    force: true

- name: Controller | Enable 'saltbox_managed_docker_controller.service'
  ansible.builtin.systemd_service:
    name: saltbox_managed_docker_controller
    enabled: true
    state: restarted
    daemon_reload: true

- name: Controller | Wait until Controller is ready
  ansible.builtin.uri:
    url: "{{ docker_controller_url }}/ping"
    method: GET
    return_content: true
    status_code: 200
  register: result
  retries: 120
  delay: 1

- name: Controller | Block Docker Controller
  ansible.builtin.uri:
    url: "{{ docker_controller_url }}/block/20"
    method: POST
    timeout: 600

- name: Controller | Import 'saltbox_managed_docker_controller_helper.service'
  ansible.builtin.template:
    src: docker-controller-helper.service.j2
    dest: /etc/systemd/system/saltbox_managed_docker_controller_helper.service
    mode: "0644"
    force: true

- name: Controller | Enable 'saltbox_managed_docker_controller_helper.service'
  ansible.builtin.systemd_service:
    name: saltbox_managed_docker_controller_helper.service
    enabled: true
    state: restarted
    daemon_reload: true

- name: "Controller | Wait for 10 seconds before commencing"
  ansible.builtin.wait_for:
    timeout: "10"
