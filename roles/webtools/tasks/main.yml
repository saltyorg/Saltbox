#########################################################################
# Title:         Saltbox: Plex Plugins / WebTools                       #
# Author(s):     desimaniac                                             #
# URL:           https://github.com/saltyorg/Saltbox                    #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check if Plex instance is defined
  ansible.builtin.set_fact:
    plex_name: "{{ plex_name | default(plex_instances[0]) }}"

- name: Check for previously installed WebTools Plugin
  ansible.builtin.stat:
    path: "{{ plex_plugin_webtools_paths_version_location }}"
  register: plex_plugin_webtools_bundle_status

- name: Tasks for previously installed WebTools Plugin
  when: plex_plugin_webtools_bundle_status.stat.exists
  block:
    - name: Set default value for 'plex_plugin_webtools_is_outdated' variable
      ansible.builtin.set_fact:
        plex_plugin_webtools_is_outdated: false

    - name: Check version of previously installed WebTools Plugin
      ansible.builtin.shell: cat '{{ plex_plugin_webtools_paths_version_location }}' |  head -n 1 | awk '{ print }'
      register: plex_plugin_webtools_previously_installed_version
      changed_when: false

    - name: Set 'plex_plugin_webtools_previously_installed_version' variable
      ansible.builtin.set_fact:
        plex_plugin_webtools_previously_installed_version: "{{ plex_plugin_webtools_previously_installed_version.stdout }}"

    - name: Check latest available version for WebTools
      ansible.builtin.shell: curl -s {{ plex_plugin_webtools_release_url }} | jq -r .tag_name
      register: plex_plugin_webtools_latest_version
      ignore_errors: true
      changed_when: false

    - name: Compare installed WebTools Plugin version with latest one
      ansible.builtin.set_fact:
        plex_plugin_webtools_is_outdated: "{{
            (plex_plugin_webtools_latest_version is failed) or
              ((plex_plugin_webtools_latest_version is success) and
              (plex_plugin_webtools_previously_installed_version is version(plex_plugin_webtools_latest_version.stdout, '<', strict=True))) }}"

- name: Install WebTools Plugin
  when: (not plex_plugin_webtools_bundle_status.stat.exists) or
        (plex_plugin_webtools_bundle_status.stat.exists and plex_plugin_webtools_is_outdated) or
        ('plex-plugin-webtools-reinstall' in ansible_run_tags)
  block:
    - name: Check to see if {{ plex_name | title }} is running
      when: ('plex-plugin-webtools' in ansible_run_tags) or ('plex-plugin-webtools-reinstall' in ansible_run_tags)
      block:
        - name: Gather list of running Docker containers
          ansible.builtin.shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' | xargs echo -n"
          register: docker_running_containers_list
          changed_when: false

        - name: Set 'docker_running_containers_list' variable
          ansible.builtin.set_fact:
            docker_running_containers_list: "{{ (docker_running_containers_list.stdout).split() }}"

        - name: Stop {{ plex_name | title }} container
          ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/stop_docker_container.yml"
          vars:
            var_prefix: "plex"

          when: (plex_docker_container in docker_running_containers_list)

    - name: Remove outdated WebTools Plugin
      ansible.builtin.file:
        path: "{{ plex_plugin_webtools_paths_location }}"
        state: absent

    - name: Get latest WebTools Plugin URL
      ansible.builtin.shell: |
        curl -s {{ plex_plugin_webtools_release_url }} \
          | jq -r ".assets[] | select(.name | test(\"WebTools.bundle.zip\")) | .browser_download_url"
      register: plex_plugin_webtools_download_url
      ignore_errors: true
      changed_when: false

    - name: Set 'plex_plugin_webtools_download_url' variable
      ansible.builtin.set_fact:
        plex_plugin_webtools_download_url: "{{ plex_plugin_webtools_download_url.stdout | default(plex_plugin_webtools_download_url_backup, true) }}"

    - name: "Create {{ plex_name | title }} 'plug-ins' directory"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        recurse: true
      with_items:
        - "{{ plex_role_paths_plugins_location }}"

    - name: Install WebTools Plugin
      ansible.builtin.unarchive:
        src: "{{ plex_plugin_webtools_download_url }}"
        dest: "{{ plex_role_paths_plugins_location }}"
        copy: false
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0775"
        validate_certs: false
      register: plex_plugin_webtools_download_status
      ignore_errors: true

    - name: Post-Successful WebTools Plugin Download
      when: (plex_plugin_webtools_download_status is success)
      block:
        - name: Check for newly installed WebTools Plugin
          ansible.builtin.stat:
            path: "{{ plex_plugin_webtools_paths_version_location }}"
          register: plex_plugin_webtools_version_status

        - name: Post-Successful WebTools Plugin Install
          when: plex_plugin_webtools_version_status.stat.exists
          block:
            - name: Check version of newly installed WebTools Plugin
              ansible.builtin.shell: cat '{{ plex_plugin_webtools_paths_version_location }}' |  head -n 1 | awk '{ print }'
              register: plex_plugin_webtools_newly_installed_version
              changed_when: false

            - name: Set 'plex_plugin_webtools_previously_installed_version' variable
              ansible.builtin.set_fact:
                plex_plugin_webtools_newly_installed_version: "{{ plex_plugin_webtools_newly_installed_version.stdout }}"

            - name: Display WebTools Plugin version
              ansible.builtin.debug:
                msg: "WebTools Plugin version {{ plex_plugin_webtools_newly_installed_version }} installed."

    - name: WebTools Plugin install failed
      ansible.builtin.debug:
        msg: "WebTools Plugin install failed."
      when: (plex_plugin_webtools_download_status is failed) or
            ((plex_plugin_webtools_download_status is success) and (not plex_plugin_webtools_version_status.stat.exists))

    - name: Start {{ plex_name | title }} container
      ansible.builtin.include_tasks: "{{ resources_tasks_path }}/docker/start_docker_container.yml"
      vars:
        var_prefix: "plex"
      when:
        - ('plex-plugin-webtools' in ansible_run_tags) or ('plex-plugin-webtools-reinstall' in ansible_run_tags)
        - (plex_docker_container in docker_running_containers_list)

- name: WebTools Plugin was not updated
  ansible.builtin.debug:
    msg: "WebTools is already the latest version."
  when:
    - plex_plugin_webtools_bundle_status.stat.exists
    - (not plex_plugin_webtools_is_outdated)
    - ('plex-plugin-webtools-reinstall' not in ansible_run_tags)
